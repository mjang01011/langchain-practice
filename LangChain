{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMUH1WJgOU60t9MZdCAMqDe"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":3,"metadata":{"id":"TAcj2QKUgNSl","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1720008928291,"user_tz":-540,"elapsed":24682,"user":{"displayName":"Michael Jang","userId":"17204225237554874105"}},"outputId":"612614b0-f1a6-48b5-96b9-60978b620aa0"},"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m328.3/328.3 kB\u001b[0m \u001b[31m4.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m975.5/975.5 kB\u001b[0m \u001b[31m8.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m45.9/45.9 kB\u001b[0m \u001b[31m4.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m202.7/202.7 kB\u001b[0m \u001b[31m7.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m216.2/216.2 kB\u001b[0m \u001b[31m8.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.1/1.1 MB\u001b[0m \u001b[31m13.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m290.4/290.4 kB\u001b[0m \u001b[31m15.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m75.6/75.6 kB\u001b[0m \u001b[31m7.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m337.4/337.4 kB\u001b[0m \u001b[31m14.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m127.5/127.5 kB\u001b[0m \u001b[31m10.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.2/2.2 MB\u001b[0m \u001b[31m19.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m77.9/77.9 kB\u001b[0m \u001b[31m7.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m58.3/58.3 kB\u001b[0m \u001b[31m5.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m141.1/141.1 kB\u001b[0m \u001b[31m11.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m49.2/49.2 kB\u001b[0m \u001b[31m4.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Building wheel for docx2txt (setup.py) ... \u001b[?25l\u001b[?25hdone\n"]}],"source":["!pip install -r ./requirements.txt -q"]},{"cell_type":"code","source":["pip show langchain"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_RRRxYtJg9aN","executionInfo":{"status":"ok","timestamp":1720008946460,"user_tz":-540,"elapsed":7623,"user":{"displayName":"Michael Jang","userId":"17204225237554874105"}},"outputId":"fdf268cb-879a-4bf9-e3ea-bf3b9f721b8f"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Name: langchain\n","Version: 0.2.6\n","Summary: Building applications with LLMs through composability\n","Home-page: https://github.com/langchain-ai/langchain\n","Author: \n","Author-email: \n","License: MIT\n","Location: /usr/local/lib/python3.10/dist-packages\n","Requires: aiohttp, async-timeout, langchain-core, langchain-text-splitters, langsmith, numpy, pydantic, PyYAML, requests, SQLAlchemy, tenacity\n","Required-by: langchain-community\n"]}]},{"cell_type":"markdown","source":["Connecting to ChatGPT and asking prompts"],"metadata":{"id":"VnjkZzrHqaGp"}},{"cell_type":"code","source":["import os\n","from dotenv import load_dotenv, find_dotenv\n","\n","load_dotenv(find_dotenv(), override=True)\n","openai_api_key = os.environ.get('OPENAI_API_KEY')"],"metadata":{"id":"143HNdx8hZC0","executionInfo":{"status":"ok","timestamp":1720009874003,"user_tz":-540,"elapsed":369,"user":{"displayName":"Michael Jang","userId":"17204225237554874105"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["from langchain_openai import ChatOpenAI\n","\n","llm = ChatOpenAI(openai_api_key=openai_api_key)\n","output = llm.invoke('Explain large language model in one sentence.')\n","print(output.content)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"s6EObCdnjYhl","executionInfo":{"status":"ok","timestamp":1720010832622,"user_tz":-540,"elapsed":1422,"user":{"displayName":"Michael Jang","userId":"17204225237554874105"}},"outputId":"9c3d6a9f-950a-4c56-ab8b-f08ff01144fc"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["A large language model is a type of artificial intelligence system that is trained on vast amounts of text data to generate human-like text and understand and respond to natural language inputs.\n"]}]},{"cell_type":"markdown","source":["View model type, temperature, etc"],"metadata":{"id":"PcSU4REjqf5t"}},{"cell_type":"code","source":["help(ChatOpenAI)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wzRhWBPakOLn","executionInfo":{"status":"ok","timestamp":1720010066693,"user_tz":-540,"elapsed":474,"user":{"displayName":"Michael Jang","userId":"17204225237554874105"}},"outputId":"ba04240c-6b41-431b-f0e4-4fdb57ec2b45"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["Help on class ChatOpenAI in module langchain_openai.chat_models.base:\n","\n","class ChatOpenAI(BaseChatOpenAI)\n"," |  ChatOpenAI(*, name: Optional[str] = None, cache: ForwardRef('Union[BaseCache, bool, None]') = None, verbose: bool = None, callbacks: ForwardRef('Callbacks') = None, tags: Optional[List[str]] = None, metadata: Optional[Dict[str, Any]] = None, custom_get_token_ids: Optional[Callable[[str], List[int]]] = None, callback_manager: Optional[langchain_core.callbacks.base.BaseCallbackManager] = None, client: Any = None, async_client: Any = None, model: str = 'gpt-3.5-turbo', temperature: float = 0.7, model_kwargs: Dict[str, Any] = None, api_key: Optional[pydantic.v1.types.SecretStr] = None, base_url: Optional[str] = None, organization: Optional[str] = None, openai_proxy: Optional[str] = None, timeout: Union[float, Tuple[float, float], Any, NoneType] = None, max_retries: int = 2, streaming: bool = False, n: int = 1, max_tokens: Optional[int] = None, tiktoken_model_name: Optional[str] = None, default_headers: Optional[Mapping[str, str]] = None, default_query: Optional[Mapping[str, object]] = None, http_client: Optional[Any] = None, http_async_client: Optional[Any] = None, stop_sequences: Union[List[str], str, NoneType] = None, extra_body: Optional[Mapping[str, Any]] = None, stream_usage: bool = False) -> None\n"," |  \n"," |  OpenAI chat model integration.\n"," |  \n"," |  Setup:\n"," |      Install ``langchain-openai`` and set environment variable ``OPENAI_API_KEY``.\n"," |  \n"," |      .. code-block:: bash\n"," |  \n"," |          pip install -U langchain-openai\n"," |          export OPENAI_API_KEY=\"your-api-key\"\n"," |  \n"," |  Key init args — completion params:\n"," |      model: str\n"," |          Name of OpenAI model to use.\n"," |      temperature: float\n"," |          Sampling temperature.\n"," |      max_tokens: Optional[int]\n"," |          Max number of tokens to generate.\n"," |      logprobs: Optional[bool]\n"," |          Whether to return logprobs.\n"," |      stream_options: Dict\n"," |          Configure streaming outputs, like whether to return token usage when\n"," |          streaming (``{\"include_usage\": True}``).\n"," |  \n"," |  Key init args — client params:\n"," |      timeout: Union[float, Tuple[float, float], Any, None]\n"," |          Timeout for requests.\n"," |      max_retries: int\n"," |          Max number of retries.\n"," |      api_key: Optional[str]\n"," |          OpenAI API key. If not passed in will be read from env var OPENAI_API_KEY.\n"," |      base_url: Optional[str]\n"," |          Base URL for API requests. Only specify if using a proxy or service\n"," |          emulator.\n"," |      organization: Optional[str]\n"," |          OpenAI organization ID. If not passed in will be read from env\n"," |          var OPENAI_ORG_ID.\n"," |  \n"," |  See full list of supported init args and their descriptions in the params section.\n"," |  \n"," |  Instantiate:\n"," |      .. code-block:: python\n"," |  \n"," |          from langchain_openai import ChatOpenAI\n"," |  \n"," |          llm = ChatOpenAI(\n"," |              model=\"gpt-4o\",\n"," |              temperature=0,\n"," |              max_tokens=None,\n"," |              timeout=None,\n"," |              max_retries=2,\n"," |              # api_key=\"...\",\n"," |              # base_url=\"...\",\n"," |              # organization=\"...\",\n"," |              # other params...\n"," |          )\n"," |  \n"," |  **NOTE**: Any param which is not explicitly supported will be passed directly to the\n"," |  ``openai.OpenAI.chat.completions.create(...)`` API every time to the model is\n"," |  invoked. For example:\n"," |      .. code-block:: python\n"," |  \n"," |          from langchain_openai import ChatOpenAI\n"," |          import openai\n"," |  \n"," |          ChatOpenAI(..., frequency_penalty=0.2).invoke(...)\n"," |  \n"," |          # results in underlying API call of:\n"," |  \n"," |          openai.OpenAI(..).chat.completions.create(..., frequency_penalty=0.2)\n"," |  \n"," |          # which is also equivalent to:\n"," |  \n"," |          ChatOpenAI(...).invoke(..., frequency_penalty=0.2)\n"," |  \n"," |  Invoke:\n"," |      .. code-block:: python\n"," |  \n"," |          messages = [\n"," |              (\n"," |                  \"system\",\n"," |                  \"You are a helpful translator. Translate the user sentence to French.\",\n"," |              ),\n"," |              (\"human\", \"I love programming.\"),\n"," |          ]\n"," |          llm.invoke(messages)\n"," |  \n"," |      .. code-block:: python\n"," |  \n"," |          AIMessage(\n"," |              content=\"J'adore la programmation.\",\n"," |              response_metadata={\n"," |                  \"token_usage\": {\n"," |                      \"completion_tokens\": 5,\n"," |                      \"prompt_tokens\": 31,\n"," |                      \"total_tokens\": 36,\n"," |                  },\n"," |                  \"model_name\": \"gpt-4o\",\n"," |                  \"system_fingerprint\": \"fp_43dfabdef1\",\n"," |                  \"finish_reason\": \"stop\",\n"," |                  \"logprobs\": None,\n"," |              },\n"," |              id=\"run-012cffe2-5d3d-424d-83b5-51c6d4a593d1-0\",\n"," |              usage_metadata={\"input_tokens\": 31, \"output_tokens\": 5, \"total_tokens\": 36},\n"," |          )\n"," |  \n"," |  Stream:\n"," |      .. code-block:: python\n"," |  \n"," |          for chunk in llm.stream(messages):\n"," |              print(chunk)\n"," |  \n"," |      .. code-block:: python\n"," |  \n"," |          AIMessageChunk(content=\"\", id=\"run-9e1517e3-12bf-48f2-bb1b-2e824f7cd7b0\")\n"," |          AIMessageChunk(content=\"J\", id=\"run-9e1517e3-12bf-48f2-bb1b-2e824f7cd7b0\")\n"," |          AIMessageChunk(content=\"'adore\", id=\"run-9e1517e3-12bf-48f2-bb1b-2e824f7cd7b0\")\n"," |          AIMessageChunk(content=\" la\", id=\"run-9e1517e3-12bf-48f2-bb1b-2e824f7cd7b0\")\n"," |          AIMessageChunk(\n"," |              content=\" programmation\", id=\"run-9e1517e3-12bf-48f2-bb1b-2e824f7cd7b0\"\n"," |          )\n"," |          AIMessageChunk(content=\".\", id=\"run-9e1517e3-12bf-48f2-bb1b-2e824f7cd7b0\")\n"," |          AIMessageChunk(\n"," |              content=\"\",\n"," |              response_metadata={\"finish_reason\": \"stop\"},\n"," |              id=\"run-9e1517e3-12bf-48f2-bb1b-2e824f7cd7b0\",\n"," |          )\n"," |  \n"," |      .. code-block:: python\n"," |  \n"," |          stream = llm.stream(messages)\n"," |          full = next(stream)\n"," |          for chunk in stream:\n"," |              full += chunk\n"," |          full\n"," |  \n"," |      .. code-block:: python\n"," |  \n"," |          AIMessageChunk(\n"," |              content=\"J'adore la programmation.\",\n"," |              response_metadata={\"finish_reason\": \"stop\"},\n"," |              id=\"run-bf917526-7f58-4683-84f7-36a6b671d140\",\n"," |          )\n"," |  \n"," |  Async:\n"," |      .. code-block:: python\n"," |  \n"," |          await llm.ainvoke(messages)\n"," |  \n"," |          # stream:\n"," |          # async for chunk in (await llm.astream(messages))\n"," |  \n"," |          # batch:\n"," |          # await llm.abatch([messages])\n"," |  \n"," |      .. code-block:: python\n"," |  \n"," |          AIMessage(\n"," |              content=\"J'adore la programmation.\",\n"," |              response_metadata={\n"," |                  \"token_usage\": {\n"," |                      \"completion_tokens\": 5,\n"," |                      \"prompt_tokens\": 31,\n"," |                      \"total_tokens\": 36,\n"," |                  },\n"," |                  \"model_name\": \"gpt-4o\",\n"," |                  \"system_fingerprint\": \"fp_43dfabdef1\",\n"," |                  \"finish_reason\": \"stop\",\n"," |                  \"logprobs\": None,\n"," |              },\n"," |              id=\"run-012cffe2-5d3d-424d-83b5-51c6d4a593d1-0\",\n"," |              usage_metadata={\"input_tokens\": 31, \"output_tokens\": 5, \"total_tokens\": 36},\n"," |          )\n"," |  \n"," |  Tool calling:\n"," |      .. code-block:: python\n"," |  \n"," |          from langchain_core.pydantic_v1 import BaseModel, Field\n"," |  \n"," |  \n"," |          class GetWeather(BaseModel):\n"," |              '''Get the current weather in a given location'''\n"," |  \n"," |              location: str = Field(\n"," |                  ..., description=\"The city and state, e.g. San Francisco, CA\"\n"," |              )\n"," |  \n"," |  \n"," |          class GetPopulation(BaseModel):\n"," |              '''Get the current population in a given location'''\n"," |  \n"," |              location: str = Field(\n"," |                  ..., description=\"The city and state, e.g. San Francisco, CA\"\n"," |              )\n"," |  \n"," |  \n"," |          llm_with_tools = llm.bind_tools([GetWeather, GetPopulation])\n"," |          ai_msg = llm_with_tools.invoke(\n"," |              \"Which city is hotter today and which is bigger: LA or NY?\"\n"," |          )\n"," |          ai_msg.tool_calls\n"," |  \n"," |      .. code-block:: python\n"," |  \n"," |          [\n"," |              {\n"," |                  \"name\": \"GetWeather\",\n"," |                  \"args\": {\"location\": \"Los Angeles, CA\"},\n"," |                  \"id\": \"call_6XswGD5Pqk8Tt5atYr7tfenU\",\n"," |              },\n"," |              {\n"," |                  \"name\": \"GetWeather\",\n"," |                  \"args\": {\"location\": \"New York, NY\"},\n"," |                  \"id\": \"call_ZVL15vA8Y7kXqOy3dtmQgeCi\",\n"," |              },\n"," |              {\n"," |                  \"name\": \"GetPopulation\",\n"," |                  \"args\": {\"location\": \"Los Angeles, CA\"},\n"," |                  \"id\": \"call_49CFW8zqC9W7mh7hbMLSIrXw\",\n"," |              },\n"," |              {\n"," |                  \"name\": \"GetPopulation\",\n"," |                  \"args\": {\"location\": \"New York, NY\"},\n"," |                  \"id\": \"call_6ghfKxV264jEfe1mRIkS3PE7\",\n"," |              },\n"," |          ]\n"," |  \n"," |      Note that ``openai >= 1.32`` supports a ``parallel_tool_calls`` parameter\n"," |      that defaults to ``True``. This parameter can be set to ``False`` to\n"," |      disable parallel tool calls:\n"," |  \n"," |      .. code-block:: python\n"," |  \n"," |          ai_msg = llm_with_tools.invoke(\n"," |              \"What is the weather in LA and NY?\", parallel_tool_calls=False\n"," |          )\n"," |          ai_msg.tool_calls\n"," |  \n"," |      .. code-block:: python\n"," |  \n"," |          [\n"," |              {\n"," |                  \"name\": \"GetWeather\",\n"," |                  \"args\": {\"location\": \"Los Angeles, CA\"},\n"," |                  \"id\": \"call_4OoY0ZR99iEvC7fevsH8Uhtz\",\n"," |              }\n"," |          ]\n"," |  \n"," |      Like other runtime parameters, ``parallel_tool_calls`` can be bound to a model\n"," |      using ``llm.bind(parallel_tool_calls=False)`` or during instantiation by\n"," |      setting ``model_kwargs``.\n"," |  \n"," |      See ``ChatOpenAI.bind_tools()`` method for more.\n"," |  \n"," |  Structured output:\n"," |      .. code-block:: python\n"," |  \n"," |          from typing import Optional\n"," |  \n"," |          from langchain_core.pydantic_v1 import BaseModel, Field\n"," |  \n"," |  \n"," |          class Joke(BaseModel):\n"," |              '''Joke to tell user.'''\n"," |  \n"," |              setup: str = Field(description=\"The setup of the joke\")\n"," |              punchline: str = Field(description=\"The punchline to the joke\")\n"," |              rating: Optional[int] = Field(description=\"How funny the joke is, from 1 to 10\")\n"," |  \n"," |  \n"," |          structured_llm = llm.with_structured_output(Joke)\n"," |          structured_llm.invoke(\"Tell me a joke about cats\")\n"," |  \n"," |      .. code-block:: python\n"," |  \n"," |          Joke(\n"," |              setup=\"Why was the cat sitting on the computer?\",\n"," |              punchline=\"To keep an eye on the mouse!\",\n"," |              rating=None,\n"," |          )\n"," |  \n"," |      See ``ChatOpenAI.with_structured_output()`` for more.\n"," |  \n"," |  JSON mode:\n"," |      .. code-block:: python\n"," |  \n"," |          json_llm = llm.bind(response_format={\"type\": \"json_object\"})\n"," |          ai_msg = json_llm.invoke(\n"," |              \"Return a JSON object with key 'random_ints' and a value of 10 random ints in [0-99]\"\n"," |          )\n"," |          ai_msg.content\n"," |  \n"," |      .. code-block:: python\n"," |  \n"," |          '\\n{\\n  \"random_ints\": [23, 87, 45, 12, 78, 34, 56, 90, 11, 67]\\n}'\n"," |  \n"," |  Image input:\n"," |      .. code-block:: python\n"," |  \n"," |          import base64\n"," |          import httpx\n"," |          from langchain_core.messages import HumanMessage\n"," |  \n"," |          image_url = \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg\"\n"," |          image_data = base64.b64encode(httpx.get(image_url).content).decode(\"utf-8\")\n"," |          message = HumanMessage(\n"," |              content=[\n"," |                  {\"type\": \"text\", \"text\": \"describe the weather in this image\"},\n"," |                  {\n"," |                      \"type\": \"image_url\",\n"," |                      \"image_url\": {\"url\": f\"data:image/jpeg;base64,{image_data}\"},\n"," |                  },\n"," |              ]\n"," |          )\n"," |          ai_msg = llm.invoke([message])\n"," |          ai_msg.content\n"," |  \n"," |      .. code-block:: python\n"," |  \n"," |          \"The weather in the image appears to be clear and pleasant. The sky is mostly blue with scattered, light clouds, suggesting a sunny day with minimal cloud cover. There is no indication of rain or strong winds, and the overall scene looks bright and calm. The lush green grass and clear visibility further indicate good weather conditions.\"\n"," |  \n"," |  Token usage:\n"," |      .. code-block:: python\n"," |  \n"," |          ai_msg = llm.invoke(messages)\n"," |          ai_msg.usage_metadata\n"," |  \n"," |      .. code-block:: python\n"," |  \n"," |          {\"input_tokens\": 28, \"output_tokens\": 5, \"total_tokens\": 33}\n"," |  \n"," |      When streaming, set the ``stream_usage`` kwarg:\n"," |  \n"," |      .. code-block:: python\n"," |  \n"," |          stream = llm.stream(messages, stream_usage=True)\n"," |          full = next(stream)\n"," |          for chunk in stream:\n"," |              full += chunk\n"," |          full.usage_metadata\n"," |  \n"," |      .. code-block:: python\n"," |  \n"," |          {\"input_tokens\": 28, \"output_tokens\": 5, \"total_tokens\": 33}\n"," |  \n"," |      Alternatively, setting ``stream_usage`` when instantiating the model can be\n"," |      useful when incorporating ``ChatOpenAI`` into LCEL chains-- or when using\n"," |      methods like ``.with_structured_output``, which generate chains under the\n"," |      hood.\n"," |  \n"," |      .. code-block:: python\n"," |  \n"," |          llm = ChatOpenAI(model=\"gpt-4o\", stream_usage=True)\n"," |          structured_llm = llm.with_structured_output(...)\n"," |  \n"," |  Logprobs:\n"," |      .. code-block:: python\n"," |  \n"," |          logprobs_llm = llm.bind(logprobs=True)\n"," |          ai_msg = logprobs_llm.invoke(messages)\n"," |          ai_msg.response_metadata[\"logprobs\"]\n"," |  \n"," |      .. code-block:: python\n"," |  \n"," |          {\n"," |              \"content\": [\n"," |                  {\n"," |                      \"token\": \"J\",\n"," |                      \"bytes\": [74],\n"," |                      \"logprob\": -4.9617593e-06,\n"," |                      \"top_logprobs\": [],\n"," |                  },\n"," |                  {\n"," |                      \"token\": \"'adore\",\n"," |                      \"bytes\": [39, 97, 100, 111, 114, 101],\n"," |                      \"logprob\": -0.25202933,\n"," |                      \"top_logprobs\": [],\n"," |                  },\n"," |                  {\n"," |                      \"token\": \" la\",\n"," |                      \"bytes\": [32, 108, 97],\n"," |                      \"logprob\": -0.20141791,\n"," |                      \"top_logprobs\": [],\n"," |                  },\n"," |                  {\n"," |                      \"token\": \" programmation\",\n"," |                      \"bytes\": [\n"," |                          32,\n"," |                          112,\n"," |                          114,\n"," |                          111,\n"," |                          103,\n"," |                          114,\n"," |                          97,\n"," |                          109,\n"," |                          109,\n"," |                          97,\n"," |                          116,\n"," |                          105,\n"," |                          111,\n"," |                          110,\n"," |                      ],\n"," |                      \"logprob\": -1.9361265e-07,\n"," |                      \"top_logprobs\": [],\n"," |                  },\n"," |                  {\n"," |                      \"token\": \".\",\n"," |                      \"bytes\": [46],\n"," |                      \"logprob\": -1.2233183e-05,\n"," |                      \"top_logprobs\": [],\n"," |                  },\n"," |              ]\n"," |          }\n"," |  \n"," |  Response metadata\n"," |      .. code-block:: python\n"," |  \n"," |          ai_msg = llm.invoke(messages)\n"," |          ai_msg.response_metadata\n"," |  \n"," |      .. code-block:: python\n"," |  \n"," |          {\n"," |              \"token_usage\": {\n"," |                  \"completion_tokens\": 5,\n"," |                  \"prompt_tokens\": 28,\n"," |                  \"total_tokens\": 33,\n"," |              },\n"," |              \"model_name\": \"gpt-4o\",\n"," |              \"system_fingerprint\": \"fp_319be4768e\",\n"," |              \"finish_reason\": \"stop\",\n"," |              \"logprobs\": None,\n"," |          }\n"," |  \n"," |  Method resolution order:\n"," |      ChatOpenAI\n"," |      BaseChatOpenAI\n"," |      langchain_core.language_models.chat_models.BaseChatModel\n"," |      langchain_core.language_models.base.BaseLanguageModel\n"," |      langchain_core.runnables.base.RunnableSerializable\n"," |      langchain_core.load.serializable.Serializable\n"," |      pydantic.v1.main.BaseModel\n"," |      pydantic.v1.utils.Representation\n"," |      langchain_core.runnables.base.Runnable\n"," |      typing.Generic\n"," |      abc.ABC\n"," |      builtins.object\n"," |  \n"," |  Class methods defined here:\n"," |  \n"," |  get_lc_namespace() -> 'List[str]' from pydantic.v1.main.ModelMetaclass\n"," |      Get the namespace of the langchain object.\n"," |  \n"," |  is_lc_serializable() -> 'bool' from pydantic.v1.main.ModelMetaclass\n"," |      Return whether this model can be serialized by Langchain.\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Static methods defined here:\n"," |  \n"," |  __json_encoder__ = pydantic_encoder(obj: Any) -> Any\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Readonly properties defined here:\n"," |  \n"," |  lc_attributes\n"," |      List of attribute names that should be included in the serialized kwargs.\n"," |      \n"," |      These attributes must be accepted by the constructor.\n"," |  \n"," |  lc_secrets\n"," |      A map of constructor argument names to secret ids.\n"," |      \n"," |      For example,\n"," |          {\"openai_api_key\": \"OPENAI_API_KEY\"}\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Data and other attributes defined here:\n"," |  \n"," |  __abstractmethods__ = frozenset()\n"," |  \n"," |  __annotations__ = {'stream_usage': 'bool'}\n"," |  \n"," |  __class_vars__ = set()\n"," |  \n"," |  __config__ = <class 'pydantic.v1.config.Config'>\n"," |  \n"," |  __custom_root_type__ = False\n"," |  \n"," |  __exclude_fields__ = {'async_client': True, 'callback_manager': True, ...\n"," |  \n"," |  __fields__ = {'async_client': ModelField(name='async_client', type=Opt...\n"," |  \n"," |  __hash__ = None\n"," |  \n"," |  __include_fields__ = None\n"," |  \n"," |  __parameters__ = ()\n"," |  \n"," |  __post_root_validators__ = [(False, <function BaseChatOpenAI.validate_...\n"," |  \n"," |  __pre_root_validators__ = [<function BaseChatModel.raise_deprecation>,...\n"," |  \n"," |  __private_attributes__ = {}\n"," |  \n"," |  __schema_cache__ = {}\n"," |  \n"," |  __signature__ = <Signature (*, name: Optional[str] = None, cache...ny]...\n"," |  \n"," |  __validators__ = {'verbose': [<pydantic.v1.class_validators.Validator ...\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Methods inherited from BaseChatOpenAI:\n"," |  \n"," |  bind_functions(self, functions: 'Sequence[Union[Dict[str, Any], Type[BaseModel], Callable, BaseTool]]', function_call: \"Optional[Union[_FunctionCall, str, Literal['auto', 'none']]]\" = None, **kwargs: 'Any') -> 'Runnable[LanguageModelInput, BaseMessage]'\n"," |      Bind functions (and other objects) to this chat model.\n"," |      \n"," |      Assumes model is compatible with OpenAI function-calling API.\n"," |      \n"," |      NOTE: Using bind_tools is recommended instead, as the `functions` and\n"," |          `function_call` request parameters are officially marked as deprecated by\n"," |          OpenAI.\n"," |      \n"," |      Args:\n"," |          functions: A list of function definitions to bind to this chat model.\n"," |              Can be  a dictionary, pydantic model, or callable. Pydantic\n"," |              models and callables will be automatically converted to\n"," |              their schema dictionary representation.\n"," |          function_call: Which function to require the model to call.\n"," |              Must be the name of the single provided function or\n"," |              \"auto\" to automatically determine which function to call\n"," |              (if any).\n"," |          **kwargs: Any additional parameters to pass to the\n"," |              :class:`~langchain.runnable.Runnable` constructor.\n"," |  \n"," |  bind_tools(self, tools: 'Sequence[Union[Dict[str, Any], Type[BaseModel], Callable, BaseTool]]', *, tool_choice: \"Optional[Union[dict, str, Literal['auto', 'none', 'required', 'any'], bool]]\" = None, **kwargs: 'Any') -> 'Runnable[LanguageModelInput, BaseMessage]'\n"," |      Bind tool-like objects to this chat model.\n"," |      \n"," |      Assumes model is compatible with OpenAI tool-calling API.\n"," |      \n"," |      Args:\n"," |          tools: A list of tool definitions to bind to this chat model.\n"," |              Can be  a dictionary, pydantic model, callable, or BaseTool. Pydantic\n"," |              models, callables, and BaseTools will be automatically converted to\n"," |              their schema dictionary representation.\n"," |          tool_choice: Which tool to require the model to call.\n"," |              Options are:\n"," |              name of the tool (str): calls corresponding tool;\n"," |              \"auto\": automatically selects a tool (including no tool);\n"," |              \"none\": does not call a tool;\n"," |              \"any\" or \"required\": force at least one tool to be called;\n"," |              True: forces tool call (requires `tools` be length 1);\n"," |              False: no effect;\n"," |      \n"," |              or a dict of the form:\n"," |              {\"type\": \"function\", \"function\": {\"name\": <<tool_name>>}}.\n"," |          **kwargs: Any additional parameters to pass to the\n"," |              :class:`~langchain.runnable.Runnable` constructor.\n"," |  \n"," |  get_num_tokens_from_messages(self, messages: 'List[BaseMessage]') -> 'int'\n"," |      Calculate num tokens for gpt-3.5-turbo and gpt-4 with tiktoken package.\n"," |      \n"," |      **Requirements**: You must have the ``pillow`` installed if you want to count\n"," |      image tokens if you are specifying the image as a base64 string, and you must\n"," |      have both ``pillow`` and ``httpx`` installed if you are specifying the image\n"," |      as a URL. If these aren't installed image inputs will be ignored in token\n"," |      counting.\n"," |      \n"," |      OpenAI reference: https://github.com/openai/openai-cookbook/blob/\n"," |      main/examples/How_to_format_inputs_to_ChatGPT_models.ipynb\n"," |  \n"," |  get_token_ids(self, text: 'str') -> 'List[int]'\n"," |      Get the tokens present in the text with tiktoken package.\n"," |  \n"," |  with_structured_output(self, schema: 'Optional[_DictOrPydanticClass]' = None, *, method: \"Literal['function_calling', 'json_mode']\" = 'function_calling', include_raw: 'bool' = False, **kwargs: 'Any') -> 'Runnable[LanguageModelInput, _DictOrPydantic]'\n"," |      Model wrapper that returns outputs formatted to match the given schema.\n"," |      \n"," |              Args:\n"," |                  schema: The output schema as a dict or a Pydantic class. If a Pydantic class\n"," |                      then the model output will be an object of that class. If a dict then\n"," |                      the model output will be a dict. With a Pydantic class the returned\n"," |                      attributes will be validated, whereas with a dict they will not be. If\n"," |                      `method` is \"function_calling\" and `schema` is a dict, then the dict\n"," |                      must match the OpenAI function-calling spec or be a valid JSON schema\n"," |                      with top level 'title' and 'description' keys specified.\n"," |                  method: The method for steering model generation, either \"function_calling\"\n"," |                      or \"json_mode\". If \"function_calling\" then the schema will be converted\n"," |                      to an OpenAI function and the returned model will make use of the\n"," |                      function-calling API. If \"json_mode\" then OpenAI's JSON mode will be\n"," |                      used. Note that if using \"json_mode\" then you must include instructions\n"," |                      for formatting the output into the desired schema into the model call.\n"," |                  include_raw: If False then only the parsed structured output is returned. If\n"," |                      an error occurs during model output parsing it will be raised. If True\n"," |                      then both the raw model response (a BaseMessage) and the parsed model\n"," |                      response will be returned. If an error occurs during output parsing it\n"," |                      will be caught and returned as well. The final output is always a dict\n"," |                      with keys \"raw\", \"parsed\", and \"parsing_error\".\n"," |      \n"," |              Returns:\n"," |                  A Runnable that takes any ChatModel input and returns as output:\n"," |      \n"," |                      If include_raw is True then a dict with keys:\n"," |                          raw: BaseMessage\n"," |                          parsed: Optional[_DictOrPydantic]\n"," |                          parsing_error: Optional[BaseException]\n"," |      \n"," |                      If include_raw is False then just _DictOrPydantic is returned,\n"," |                      where _DictOrPydantic depends on the schema:\n"," |      \n"," |                      If schema is a Pydantic class then _DictOrPydantic is the Pydantic\n"," |                          class.\n"," |      \n"," |                      If schema is a dict then _DictOrPydantic is a dict.\n"," |      \n"," |              Example: Function-calling, Pydantic schema (method=\"function_calling\", include_raw=False):\n"," |                  .. code-block:: python\n"," |      \n"," |                      from langchain_openai import ChatOpenAI\n"," |                      from langchain_core.pydantic_v1 import BaseModel\n"," |      \n"," |      \n"," |                      class AnswerWithJustification(BaseModel):\n"," |                          '''An answer to the user question along with justification for the answer.'''\n"," |      \n"," |                          answer: str\n"," |                          justification: str\n"," |      \n"," |      \n"," |                      llm = ChatOpenAI(model=\"gpt-3.5-turbo-0125\", temperature=0)\n"," |                      structured_llm = llm.with_structured_output(AnswerWithJustification)\n"," |      \n"," |                      structured_llm.invoke(\n"," |                          \"What weighs more a pound of bricks or a pound of feathers\"\n"," |                      )\n"," |      \n"," |                      # -> AnswerWithJustification(\n"," |                      #     answer='They weigh the same',\n"," |                      #     justification='Both a pound of bricks and a pound of feathers weigh one pound. The weight is the same, but the volume or density of the objects may differ.'\n"," |                      # )\n"," |      \n"," |              Example: Function-calling, Pydantic schema (method=\"function_calling\", include_raw=True):\n"," |                  .. code-block:: python\n"," |      \n"," |                      from langchain_openai import ChatOpenAI\n"," |                      from langchain_core.pydantic_v1 import BaseModel\n"," |      \n"," |      \n"," |                      class AnswerWithJustification(BaseModel):\n"," |                          '''An answer to the user question along with justification for the answer.'''\n"," |      \n"," |                          answer: str\n"," |                          justification: str\n"," |      \n"," |      \n"," |                      llm = ChatOpenAI(model=\"gpt-3.5-turbo-0125\", temperature=0)\n"," |                      structured_llm = llm.with_structured_output(\n"," |                          AnswerWithJustification, include_raw=True\n"," |                      )\n"," |      \n"," |                      structured_llm.invoke(\n"," |                          \"What weighs more a pound of bricks or a pound of feathers\"\n"," |                      )\n"," |                      # -> {\n"," |                      #     'raw': AIMessage(content='', additional_kwargs={'tool_calls': [{'id': 'call_Ao02pnFYXD6GN1yzc0uXPsvF', 'function': {'arguments': '{\"answer\":\"They weigh the same.\",\"justification\":\"Both a pound of bricks and a pound of feathers weigh one pound. The weight is the same, but the volume or density of the objects may differ.\"}', 'name': 'AnswerWithJustification'}, 'type': 'function'}]}),\n"," |                      #     'parsed': AnswerWithJustification(answer='They weigh the same.', justification='Both a pound of bricks and a pound of feathers weigh one pound. The weight is the same, but the volume or density of the objects may differ.'),\n"," |                      #     'parsing_error': None\n"," |                      # }\n"," |      \n"," |              Example: Function-calling, dict schema (method=\"function_calling\", include_raw=False):\n"," |                  .. code-block:: python\n"," |      \n"," |                      from langchain_openai import ChatOpenAI\n"," |                      from langchain_core.pydantic_v1 import BaseModel\n"," |                      from langchain_core.utils.function_calling import convert_to_openai_tool\n"," |      \n"," |      \n"," |                      class AnswerWithJustification(BaseModel):\n"," |                          '''An answer to the user question along with justification for the answer.'''\n"," |      \n"," |                          answer: str\n"," |                          justification: str\n"," |      \n"," |      \n"," |                      dict_schema = convert_to_openai_tool(AnswerWithJustification)\n"," |                      llm = ChatOpenAI(model=\"gpt-3.5-turbo-0125\", temperature=0)\n"," |                      structured_llm = llm.with_structured_output(dict_schema)\n"," |      \n"," |                      structured_llm.invoke(\n"," |                          \"What weighs more a pound of bricks or a pound of feathers\"\n"," |                      )\n"," |                      # -> {\n"," |                      #     'answer': 'They weigh the same',\n"," |                      #     'justification': 'Both a pound of bricks and a pound of feathers weigh one pound. The weight is the same, but the volume and density of the two substances differ.'\n"," |                      # }\n"," |      \n"," |              Example: JSON mode, Pydantic schema (method=\"json_mode\", include_raw=True):\n"," |                  .. code-block::\n"," |      \n"," |                      from langchain_openai import ChatOpenAI\n"," |                      from langchain_core.pydantic_v1 import BaseModel\n"," |      \n"," |                      class AnswerWithJustification(BaseModel):\n"," |                          answer: str\n"," |                          justification: str\n"," |      \n"," |                      llm = ChatOpenAI(model=\"gpt-3.5-turbo-0125\", temperature=0)\n"," |                      structured_llm = llm.with_structured_output(\n"," |                          AnswerWithJustification,\n"," |                          method=\"json_mode\",\n"," |                          include_raw=True\n"," |                      )\n"," |      \n"," |                      structured_llm.invoke(\n"," |                          \"Answer the following question. \"\n"," |                          \"Make sure to return a JSON blob with keys 'answer' and 'justification'.\n"," |      \n"," |      \"\n"," |                          \"What's heavier a pound of bricks or a pound of feathers?\"\n"," |                      )\n"," |                      # -> {\n"," |                      #     'raw': AIMessage(content='{\n"," |          \"answer\": \"They are both the same weight.\",\n"," |          \"justification\": \"Both a pound of bricks and a pound of feathers weigh one pound. The difference lies in the volume and density of the materials, not the weight.\" \n"," |      }'),\n"," |                      #     'parsed': AnswerWithJustification(answer='They are both the same weight.', justification='Both a pound of bricks and a pound of feathers weigh one pound. The difference lies in the volume and density of the materials, not the weight.'),\n"," |                      #     'parsing_error': None\n"," |                      # }\n"," |      \n"," |              Example: JSON mode, no schema (schema=None, method=\"json_mode\", include_raw=True):\n"," |                  .. code-block::\n"," |      \n"," |                      structured_llm = llm.with_structured_output(method=\"json_mode\", include_raw=True)\n"," |      \n"," |                      structured_llm.invoke(\n"," |                          \"Answer the following question. \"\n"," |                          \"Make sure to return a JSON blob with keys 'answer' and 'justification'.\n"," |      \n"," |      \"\n"," |                          \"What's heavier a pound of bricks or a pound of feathers?\"\n"," |                      )\n"," |                      # -> {\n"," |                      #     'raw': AIMessage(content='{\n"," |          \"answer\": \"They are both the same weight.\",\n"," |          \"justification\": \"Both a pound of bricks and a pound of feathers weigh one pound. The difference lies in the volume and density of the materials, not the weight.\" \n"," |      }'),\n"," |                      #     'parsed': {\n"," |                      #         'answer': 'They are both the same weight.',\n"," |                      #         'justification': 'Both a pound of bricks and a pound of feathers weigh one pound. The difference lies in the volume and density of the materials, not the weight.'\n"," |                      #     },\n"," |                      #     'parsing_error': None\n"," |                      # }\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Class methods inherited from BaseChatOpenAI:\n"," |  \n"," |  build_extra(values: 'Dict[str, Any]') -> 'Dict[str, Any]' from pydantic.v1.main.ModelMetaclass\n"," |      Build extra kwargs from additional params that were passed in.\n"," |  \n"," |  validate_environment(values: 'Dict') -> 'Dict' from pydantic.v1.main.ModelMetaclass\n"," |      Validate that api key and python package exists in environment.\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Data and other attributes inherited from BaseChatOpenAI:\n"," |  \n"," |  Config = <class 'langchain_openai.chat_models.base.BaseChatOpenAI.Conf...\n"," |      Configuration for this pydantic object.\n"," |  \n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Methods inherited from langchain_core.language_models.chat_models.BaseChatModel:\n"," |  \n"," |  __call__(self, messages: 'List[BaseMessage]', stop: 'Optional[List[str]]' = None, callbacks: 'Callbacks' = None, **kwargs: 'Any') -> 'BaseMessage'\n"," |      [*Deprecated*] \n"," |      \n"," |      Notes\n"," |      -----\n"," |      .. deprecated:: langchain-core==0.1.7\n"," |         Use invoke instead.\n"," |  \n"," |  async agenerate(self, messages: 'List[List[BaseMessage]]', stop: 'Optional[List[str]]' = None, callbacks: 'Callbacks' = None, *, tags: 'Optional[List[str]]' = None, metadata: 'Optional[Dict[str, Any]]' = None, run_name: 'Optional[str]' = None, run_id: 'Optional[uuid.UUID]' = None, **kwargs: 'Any') -> 'LLMResult'\n"," |      Asynchronously pass a sequence of prompts to a model and return generations.\n"," |      \n"," |      This method should make use of batched calls for models that expose a batched\n"," |      API.\n"," |      \n"," |      Use this method when you want to:\n"," |          1. take advantage of batched calls,\n"," |          2. need more output from the model than just the top generated value,\n"," |          3. are building chains that are agnostic to the underlying language model\n"," |              type (e.g., pure text completion models vs chat models).\n"," |      \n"," |      Args:\n"," |          messages: List of list of messages.\n"," |          stop: Stop words to use when generating. Model output is cut off at the\n"," |              first occurrence of any of these substrings.\n"," |          callbacks: Callbacks to pass through. Used for executing additional\n"," |              functionality, such as logging or streaming, throughout generation.\n"," |          **kwargs: Arbitrary additional keyword arguments. These are usually passed\n"," |              to the model provider API call.\n"," |      \n"," |      Returns:\n"," |          An LLMResult, which contains a list of candidate Generations for each input\n"," |              prompt and additional model provider-specific output.\n"," |  \n"," |  async agenerate_prompt(self, prompts: 'List[PromptValue]', stop: 'Optional[List[str]]' = None, callbacks: 'Callbacks' = None, **kwargs: 'Any') -> 'LLMResult'\n"," |      Asynchronously pass a sequence of prompts and return model generations.\n"," |      \n"," |      This method should make use of batched calls for models that expose a batched\n"," |      API.\n"," |      \n"," |      Use this method when you want to:\n"," |          1. take advantage of batched calls,\n"," |          2. need more output from the model than just the top generated value,\n"," |          3. are building chains that are agnostic to the underlying language model\n"," |              type (e.g., pure text completion models vs chat models).\n"," |      \n"," |      Args:\n"," |          prompts: List of PromptValues. A PromptValue is an object that can be\n"," |              converted to match the format of any language model (string for pure\n"," |              text generation models and BaseMessages for chat models).\n"," |          stop: Stop words to use when generating. Model output is cut off at the\n"," |              first occurrence of any of these substrings.\n"," |          callbacks: Callbacks to pass through. Used for executing additional\n"," |              functionality, such as logging or streaming, throughout generation.\n"," |          **kwargs: Arbitrary additional keyword arguments. These are usually passed\n"," |              to the model provider API call.\n"," |      \n"," |      Returns:\n"," |          An LLMResult, which contains a list of candidate Generations for each input\n"," |              prompt and additional model provider-specific output.\n"," |  \n"," |  async ainvoke(self, input: 'LanguageModelInput', config: 'Optional[RunnableConfig]' = None, *, stop: 'Optional[List[str]]' = None, **kwargs: 'Any') -> 'BaseMessage'\n"," |      Default implementation of ainvoke, calls invoke from a thread.\n"," |      \n"," |      The default implementation allows usage of async code even if\n"," |      the runnable did not implement a native async version of invoke.\n"," |      \n"," |      Subclasses should override this method if they can run asynchronously.\n"," |  \n"," |  async apredict(self, text: 'str', *, stop: 'Optional[Sequence[str]]' = None, **kwargs: 'Any') -> 'str'\n"," |      [*Deprecated*] \n"," |      \n"," |      Notes\n"," |      -----\n"," |      .. deprecated:: langchain-core==0.1.7\n"," |         Use ainvoke instead.\n"," |  \n"," |  async apredict_messages(self, messages: 'List[BaseMessage]', *, stop: 'Optional[Sequence[str]]' = None, **kwargs: 'Any') -> 'BaseMessage'\n"," |      [*Deprecated*] \n"," |      \n"," |      Notes\n"," |      -----\n"," |      .. deprecated:: langchain-core==0.1.7\n"," |         Use ainvoke instead.\n"," |  \n"," |  async astream(self, input: 'LanguageModelInput', config: 'Optional[RunnableConfig]' = None, *, stop: 'Optional[List[str]]' = None, **kwargs: 'Any') -> 'AsyncIterator[BaseMessageChunk]'\n"," |      Default implementation of astream, which calls ainvoke.\n"," |      Subclasses should override this method if they support streaming output.\n"," |  \n"," |  call_as_llm(self, message: 'str', stop: 'Optional[List[str]]' = None, **kwargs: 'Any') -> 'str'\n"," |      [*Deprecated*] \n"," |      \n"," |      Notes\n"," |      -----\n"," |      .. deprecated:: langchain-core==0.1.7\n"," |         Use invoke instead.\n"," |  \n"," |  dict(self, **kwargs: 'Any') -> 'Dict'\n"," |      Return a dictionary of the LLM.\n"," |  \n"," |  generate(self, messages: 'List[List[BaseMessage]]', stop: 'Optional[List[str]]' = None, callbacks: 'Callbacks' = None, *, tags: 'Optional[List[str]]' = None, metadata: 'Optional[Dict[str, Any]]' = None, run_name: 'Optional[str]' = None, run_id: 'Optional[uuid.UUID]' = None, **kwargs: 'Any') -> 'LLMResult'\n"," |      Pass a sequence of prompts to the model and return model generations.\n"," |      \n"," |      This method should make use of batched calls for models that expose a batched\n"," |      API.\n"," |      \n"," |      Use this method when you want to:\n"," |          1. take advantage of batched calls,\n"," |          2. need more output from the model than just the top generated value,\n"," |          3. are building chains that are agnostic to the underlying language model\n"," |              type (e.g., pure text completion models vs chat models).\n"," |      \n"," |      Args:\n"," |          messages: List of list of messages.\n"," |          stop: Stop words to use when generating. Model output is cut off at the\n"," |              first occurrence of any of these substrings.\n"," |          callbacks: Callbacks to pass through. Used for executing additional\n"," |              functionality, such as logging or streaming, throughout generation.\n"," |          **kwargs: Arbitrary additional keyword arguments. These are usually passed\n"," |              to the model provider API call.\n"," |      \n"," |      Returns:\n"," |          An LLMResult, which contains a list of candidate Generations for each input\n"," |              prompt and additional model provider-specific output.\n"," |  \n"," |  generate_prompt(self, prompts: 'List[PromptValue]', stop: 'Optional[List[str]]' = None, callbacks: 'Callbacks' = None, **kwargs: 'Any') -> 'LLMResult'\n"," |      Pass a sequence of prompts to the model and return model generations.\n"," |      \n"," |      This method should make use of batched calls for models that expose a batched\n"," |      API.\n"," |      \n"," |      Use this method when you want to:\n"," |          1. take advantage of batched calls,\n"," |          2. need more output from the model than just the top generated value,\n"," |          3. are building chains that are agnostic to the underlying language model\n"," |              type (e.g., pure text completion models vs chat models).\n"," |      \n"," |      Args:\n"," |          prompts: List of PromptValues. A PromptValue is an object that can be\n"," |              converted to match the format of any language model (string for pure\n"," |              text generation models and BaseMessages for chat models).\n"," |          stop: Stop words to use when generating. Model output is cut off at the\n"," |              first occurrence of any of these substrings.\n"," |          callbacks: Callbacks to pass through. Used for executing additional\n"," |              functionality, such as logging or streaming, throughout generation.\n"," |          **kwargs: Arbitrary additional keyword arguments. These are usually passed\n"," |              to the model provider API call.\n"," |      \n"," |      Returns:\n"," |          An LLMResult, which contains a list of candidate Generations for each input\n"," |              prompt and additional model provider-specific output.\n"," |  \n"," |  invoke(self, input: 'LanguageModelInput', config: 'Optional[RunnableConfig]' = None, *, stop: 'Optional[List[str]]' = None, **kwargs: 'Any') -> 'BaseMessage'\n"," |      Transform a single input into an output. Override to implement.\n"," |      \n"," |      Args:\n"," |          input: The input to the runnable.\n"," |          config: A config to use when invoking the runnable.\n"," |             The config supports standard keys like 'tags', 'metadata' for tracing\n"," |             purposes, 'max_concurrency' for controlling how much work to do\n"," |             in parallel, and other keys. Please refer to the RunnableConfig\n"," |             for more details.\n"," |      \n"," |      Returns:\n"," |          The output of the runnable.\n"," |  \n"," |  predict(self, text: 'str', *, stop: 'Optional[Sequence[str]]' = None, **kwargs: 'Any') -> 'str'\n"," |      [*Deprecated*] \n"," |      \n"," |      Notes\n"," |      -----\n"," |      .. deprecated:: langchain-core==0.1.7\n"," |         Use invoke instead.\n"," |  \n"," |  predict_messages(self, messages: 'List[BaseMessage]', *, stop: 'Optional[Sequence[str]]' = None, **kwargs: 'Any') -> 'BaseMessage'\n"," |      [*Deprecated*] \n"," |      \n"," |      Notes\n"," |      -----\n"," |      .. deprecated:: langchain-core==0.1.7\n"," |         Use invoke instead.\n"," |  \n"," |  stream(self, input: 'LanguageModelInput', config: 'Optional[RunnableConfig]' = None, *, stop: 'Optional[List[str]]' = None, **kwargs: 'Any') -> 'Iterator[BaseMessageChunk]'\n"," |      Default implementation of stream, which calls invoke.\n"," |      Subclasses should override this method if they support streaming output.\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Class methods inherited from langchain_core.language_models.chat_models.BaseChatModel:\n"," |  \n"," |  raise_deprecation(values: 'Dict') -> 'Dict' from pydantic.v1.main.ModelMetaclass\n"," |      Raise deprecation warning if callback_manager is used.\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Readonly properties inherited from langchain_core.language_models.chat_models.BaseChatModel:\n"," |  \n"," |  OutputType\n"," |      Get the output type for this runnable.\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Data and other attributes inherited from langchain_core.language_models.chat_models.BaseChatModel:\n"," |  \n"," |  __orig_bases__ = (langchain_core.language_models.base.BaseLanguageMode...\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Methods inherited from langchain_core.language_models.base.BaseLanguageModel:\n"," |  \n"," |  get_num_tokens(self, text: 'str') -> 'int'\n"," |      Get the number of tokens present in the text.\n"," |      \n"," |      Useful for checking if an input will fit in a model's context window.\n"," |      \n"," |      Args:\n"," |          text: The string input to tokenize.\n"," |      \n"," |      Returns:\n"," |          The integer number of tokens in the text.\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Class methods inherited from langchain_core.language_models.base.BaseLanguageModel:\n"," |  \n"," |  set_verbose(verbose: 'Optional[bool]') -> 'bool' from pydantic.v1.main.ModelMetaclass\n"," |      If verbose is None, set it.\n"," |      \n"," |      This allows users to pass in None as verbose to access the global setting.\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Readonly properties inherited from langchain_core.language_models.base.BaseLanguageModel:\n"," |  \n"," |  InputType\n"," |      Get the input type for this runnable.\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Methods inherited from langchain_core.runnables.base.RunnableSerializable:\n"," |  \n"," |  configurable_alternatives(self, which: 'ConfigurableField', *, default_key: 'str' = 'default', prefix_keys: 'bool' = False, **kwargs: 'Union[Runnable[Input, Output], Callable[[], Runnable[Input, Output]]]') -> 'RunnableSerializable[Input, Output]'\n"," |      Configure alternatives for runnables that can be set at runtime.\n"," |      \n"," |      .. code-block:: python\n"," |      \n"," |          from langchain_anthropic import ChatAnthropic\n"," |          from langchain_core.runnables.utils import ConfigurableField\n"," |          from langchain_openai import ChatOpenAI\n"," |      \n"," |          model = ChatAnthropic(\n"," |              model_name=\"claude-3-sonnet-20240229\"\n"," |          ).configurable_alternatives(\n"," |              ConfigurableField(id=\"llm\"),\n"," |              default_key=\"anthropic\",\n"," |              openai=ChatOpenAI()\n"," |          )\n"," |      \n"," |          # uses the default model ChatAnthropic\n"," |          print(model.invoke(\"which organization created you?\").content)\n"," |      \n"," |          # uses ChatOpenAI\n"," |          print(\n"," |              model.with_config(\n"," |                  configurable={\"llm\": \"openai\"}\n"," |              ).invoke(\"which organization created you?\").content\n"," |          )\n"," |  \n"," |  configurable_fields(self, **kwargs: 'AnyConfigurableField') -> 'RunnableSerializable[Input, Output]'\n"," |      Configure particular runnable fields at runtime.\n"," |      \n"," |      .. code-block:: python\n"," |      \n"," |          from langchain_core.runnables import ConfigurableField\n"," |          from langchain_openai import ChatOpenAI\n"," |      \n"," |          model = ChatOpenAI(max_tokens=20).configurable_fields(\n"," |              max_tokens=ConfigurableField(\n"," |                  id=\"output_token_number\",\n"," |                  name=\"Max tokens in the output\",\n"," |                  description=\"The maximum number of tokens in the output\",\n"," |              )\n"," |          )\n"," |      \n"," |          # max_tokens = 20\n"," |          print(\n"," |              \"max_tokens_20: \",\n"," |              model.invoke(\"tell me something about chess\").content\n"," |          )\n"," |      \n"," |          # max_tokens = 200\n"," |          print(\"max_tokens_200: \", model.with_config(\n"," |              configurable={\"output_token_number\": 200}\n"," |              ).invoke(\"tell me something about chess\").content\n"," |          )\n"," |  \n"," |  to_json(self) -> 'Union[SerializedConstructor, SerializedNotImplemented]'\n"," |      Serialize the runnable to JSON.\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Data descriptors inherited from langchain_core.runnables.base.RunnableSerializable:\n"," |  \n"," |  __weakref__\n"," |      list of weak references to the object (if defined)\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Methods inherited from langchain_core.load.serializable.Serializable:\n"," |  \n"," |  __repr_args__(self) -> Any\n"," |      Returns the attributes to show in __str__, __repr__, and __pretty__ this is generally overridden.\n"," |      \n"," |      Can either return:\n"," |      * name - value pairs, e.g.: `[('foo_name', 'foo'), ('bar_name', ['b', 'a', 'r'])]`\n"," |      * or, just values, e.g.: `[(None, 'foo'), (None, ['b', 'a', 'r'])]`\n"," |  \n"," |  to_json_not_implemented(self) -> langchain_core.load.serializable.SerializedNotImplemented\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Class methods inherited from langchain_core.load.serializable.Serializable:\n"," |  \n"," |  lc_id() -> List[str] from pydantic.v1.main.ModelMetaclass\n"," |      A unique identifier for this class for serialization purposes.\n"," |      \n"," |      The unique identifier is a list of strings that describes the path\n"," |      to the object.\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Methods inherited from pydantic.v1.main.BaseModel:\n"," |  \n"," |  __eq__(self, other: Any) -> bool\n"," |      Return self==value.\n"," |  \n"," |  __getstate__(self) -> 'DictAny'\n"," |  \n"," |  __init__(__pydantic_self__, **data: Any) -> None\n"," |      Create a new model by parsing and validating input data from keyword arguments.\n"," |      \n"," |      Raises ValidationError if the input data cannot be parsed to form a valid model.\n"," |  \n"," |  __iter__(self) -> 'TupleGenerator'\n"," |      so `dict(model)` works\n"," |  \n"," |  __setattr__(self, name, value)\n"," |      Implement setattr(self, name, value).\n"," |  \n"," |  __setstate__(self, state: 'DictAny') -> None\n"," |  \n"," |  copy(self: 'Model', *, include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None, exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None, update: Optional[ForwardRef('DictStrAny')] = None, deep: bool = False) -> 'Model'\n"," |      Duplicate a model, optionally choose which fields to include, exclude and change.\n"," |      \n"," |      :param include: fields to include in new model\n"," |      :param exclude: fields to exclude from new model, as with values this takes precedence over include\n"," |      :param update: values to change/add in the new model. Note: the data is not validated before creating\n"," |          the new model: you should trust this data\n"," |      :param deep: set to `True` to make a deep copy of the model\n"," |      :return: new model instance\n"," |  \n"," |  json(self, *, include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None, exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None, by_alias: bool = False, skip_defaults: Optional[bool] = None, exclude_unset: bool = False, exclude_defaults: bool = False, exclude_none: bool = False, encoder: Optional[Callable[[Any], Any]] = None, models_as_dict: bool = True, **dumps_kwargs: Any) -> str\n"," |      Generate a JSON representation of the model, `include` and `exclude` arguments as per `dict()`.\n"," |      \n"," |      `encoder` is an optional function to supply as `default` to json.dumps(), other arguments as per `json.dumps()`.\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Class methods inherited from pydantic.v1.main.BaseModel:\n"," |  \n"," |  __get_validators__() -> 'CallableGenerator' from pydantic.v1.main.ModelMetaclass\n"," |  \n"," |  __try_update_forward_refs__(**localns: Any) -> None from pydantic.v1.main.ModelMetaclass\n"," |      Same as update_forward_refs but will not raise exception\n"," |      when forward references are not defined.\n"," |  \n"," |  construct(_fields_set: Optional[ForwardRef('SetStr')] = None, **values: Any) -> 'Model' from pydantic.v1.main.ModelMetaclass\n"," |      Creates a new model setting __dict__ and __fields_set__ from trusted or pre-validated data.\n"," |      Default values are respected, but no other validation is performed.\n"," |      Behaves as if `Config.extra = 'allow'` was set since it adds all passed values\n"," |  \n"," |  from_orm(obj: Any) -> 'Model' from pydantic.v1.main.ModelMetaclass\n"," |  \n"," |  parse_file(path: Union[str, pathlib.Path], *, content_type: str = None, encoding: str = 'utf8', proto: pydantic.v1.parse.Protocol = None, allow_pickle: bool = False) -> 'Model' from pydantic.v1.main.ModelMetaclass\n"," |  \n"," |  parse_obj(obj: Any) -> 'Model' from pydantic.v1.main.ModelMetaclass\n"," |  \n"," |  parse_raw(b: Union[str, bytes], *, content_type: str = None, encoding: str = 'utf8', proto: pydantic.v1.parse.Protocol = None, allow_pickle: bool = False) -> 'Model' from pydantic.v1.main.ModelMetaclass\n"," |  \n"," |  schema(by_alias: bool = True, ref_template: str = '#/definitions/{model}') -> 'DictStrAny' from pydantic.v1.main.ModelMetaclass\n"," |  \n"," |  schema_json(*, by_alias: bool = True, ref_template: str = '#/definitions/{model}', **dumps_kwargs: Any) -> str from pydantic.v1.main.ModelMetaclass\n"," |  \n"," |  update_forward_refs(**localns: Any) -> None from pydantic.v1.main.ModelMetaclass\n"," |      Try to update ForwardRefs on fields based on this Model, globalns and localns.\n"," |  \n"," |  validate(value: Any) -> 'Model' from pydantic.v1.main.ModelMetaclass\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Data descriptors inherited from pydantic.v1.main.BaseModel:\n"," |  \n"," |  __dict__\n"," |      dictionary for instance variables (if defined)\n"," |  \n"," |  __fields_set__\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Methods inherited from pydantic.v1.utils.Representation:\n"," |  \n"," |  __pretty__(self, fmt: Callable[[Any], Any], **kwargs: Any) -> Generator[Any, NoneType, NoneType]\n"," |      Used by devtools (https://python-devtools.helpmanual.io/) to provide a human readable representations of objects\n"," |  \n"," |  __repr__(self) -> str\n"," |      Return repr(self).\n"," |  \n"," |  __repr_name__(self) -> str\n"," |      Name of the instance's class, used in __repr__.\n"," |  \n"," |  __repr_str__(self, join_str: str) -> str\n"," |  \n"," |  __rich_repr__(self) -> 'RichReprResult'\n"," |      Get fields for Rich library\n"," |  \n"," |  __str__(self) -> str\n"," |      Return str(self).\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Methods inherited from langchain_core.runnables.base.Runnable:\n"," |  \n"," |  __or__(self, other: 'Union[Runnable[Any, Other], Callable[[Any], Other], Callable[[Iterator[Any]], Iterator[Other]], Mapping[str, Union[Runnable[Any, Other], Callable[[Any], Other], Any]]]') -> 'RunnableSerializable[Input, Other]'\n"," |      Compose this runnable with another object to create a RunnableSequence.\n"," |  \n"," |  __ror__(self, other: 'Union[Runnable[Other, Any], Callable[[Other], Any], Callable[[Iterator[Other]], Iterator[Any]], Mapping[str, Union[Runnable[Other, Any], Callable[[Other], Any], Any]]]') -> 'RunnableSerializable[Other, Output]'\n"," |      Compose this runnable with another object to create a RunnableSequence.\n"," |  \n"," |  async abatch(self, inputs: 'List[Input]', config: 'Optional[Union[RunnableConfig, List[RunnableConfig]]]' = None, *, return_exceptions: 'bool' = False, **kwargs: 'Optional[Any]') -> 'List[Output]'\n"," |      Default implementation runs ainvoke in parallel using asyncio.gather.\n"," |      \n"," |      The default implementation of batch works well for IO bound runnables.\n"," |      \n"," |      Subclasses should override this method if they can batch more efficiently;\n"," |      e.g., if the underlying runnable uses an API which supports a batch mode.\n"," |  \n"," |  async abatch_as_completed(self, inputs: 'Sequence[Input]', config: 'Optional[Union[RunnableConfig, Sequence[RunnableConfig]]]' = None, *, return_exceptions: 'bool' = False, **kwargs: 'Optional[Any]') -> 'AsyncIterator[Tuple[int, Union[Output, Exception]]]'\n"," |      Run ainvoke in parallel on a list of inputs,\n"," |      yielding results as they complete.\n"," |  \n"," |  assign(self, **kwargs: 'Union[Runnable[Dict[str, Any], Any], Callable[[Dict[str, Any]], Any], Mapping[str, Union[Runnable[Dict[str, Any], Any], Callable[[Dict[str, Any]], Any]]]]') -> 'RunnableSerializable[Any, Any]'\n"," |      Assigns new fields to the dict output of this runnable.\n"," |      Returns a new runnable.\n"," |      \n"," |      .. code-block:: python\n"," |      \n"," |          from langchain_community.llms.fake import FakeStreamingListLLM\n"," |          from langchain_core.output_parsers import StrOutputParser\n"," |          from langchain_core.prompts import SystemMessagePromptTemplate\n"," |          from langchain_core.runnables import Runnable\n"," |          from operator import itemgetter\n"," |      \n"," |          prompt = (\n"," |              SystemMessagePromptTemplate.from_template(\"You are a nice assistant.\")\n"," |              + \"{question}\"\n"," |          )\n"," |          llm = FakeStreamingListLLM(responses=[\"foo-lish\"])\n"," |      \n"," |          chain: Runnable = prompt | llm | {\"str\": StrOutputParser()}\n"," |      \n"," |          chain_with_assign = chain.assign(hello=itemgetter(\"str\") | llm)\n"," |      \n"," |          print(chain_with_assign.input_schema.schema())\n"," |          # {'title': 'PromptInput', 'type': 'object', 'properties':\n"," |          {'question': {'title': 'Question', 'type': 'string'}}}\n"," |          print(chain_with_assign.output_schema.schema()) #\n"," |          {'title': 'RunnableSequenceOutput', 'type': 'object', 'properties':\n"," |          {'str': {'title': 'Str',\n"," |          'type': 'string'}, 'hello': {'title': 'Hello', 'type': 'string'}}}\n"," |  \n"," |  astream_events(self, input: 'Any', config: 'Optional[RunnableConfig]' = None, *, version: \"Literal['v1', 'v2']\", include_names: 'Optional[Sequence[str]]' = None, include_types: 'Optional[Sequence[str]]' = None, include_tags: 'Optional[Sequence[str]]' = None, exclude_names: 'Optional[Sequence[str]]' = None, exclude_types: 'Optional[Sequence[str]]' = None, exclude_tags: 'Optional[Sequence[str]]' = None, **kwargs: 'Any') -> 'AsyncIterator[StreamEvent]'\n"," |      [*Beta*] Generate a stream of events.\n"," |      \n"," |      Use to create an iterator over StreamEvents that provide real-time information\n"," |      about the progress of the runnable, including StreamEvents from intermediate\n"," |      results.\n"," |      \n"," |      A StreamEvent is a dictionary with the following schema:\n"," |      \n"," |      - ``event``: **str** - Event names are of the\n"," |          format: on_[runnable_type]_(start|stream|end).\n"," |      - ``name``: **str** - The name of the runnable that generated the event.\n"," |      - ``run_id``: **str** - randomly generated ID associated with the given execution of\n"," |          the runnable that emitted the event.\n"," |          A child runnable that gets invoked as part of the execution of a\n"," |          parent runnable is assigned its own unique ID.\n"," |      - ``parent_ids``: **List[str]** - The IDs of the parent runnables that\n"," |          generated the event. The root runnable will have an empty list.\n"," |          The order of the parent IDs is from the root to the immediate parent.\n"," |          Only available for v2 version of the API. The v1 version of the API\n"," |          will return an empty list.\n"," |      - ``tags``: **Optional[List[str]]** - The tags of the runnable that generated\n"," |          the event.\n"," |      - ``metadata``: **Optional[Dict[str, Any]]** - The metadata of the runnable\n"," |          that generated the event.\n"," |      - ``data``: **Dict[str, Any]**\n"," |      \n"," |      \n"," |      Below is a table that illustrates some evens that might be emitted by various\n"," |      chains. Metadata fields have been omitted from the table for brevity.\n"," |      Chain definitions have been included after the table.\n"," |      \n"," |      **ATTENTION** This reference table is for the V2 version of the schema.\n"," |      \n"," |      +----------------------+------------------+---------------------------------+-----------------------------------------------+-------------------------------------------------+\n"," |      | event                | name             | chunk                           | input                                         | output                                          |\n"," |      +======================+==================+=================================+===============================================+=================================================+\n"," |      | on_chat_model_start  | [model name]     |                                 | {\"messages\": [[SystemMessage, HumanMessage]]} |                                                 |\n"," |      +----------------------+------------------+---------------------------------+-----------------------------------------------+-------------------------------------------------+\n"," |      | on_chat_model_stream | [model name]     | AIMessageChunk(content=\"hello\") |                                               |                                                 |\n"," |      +----------------------+------------------+---------------------------------+-----------------------------------------------+-------------------------------------------------+\n"," |      | on_chat_model_end    | [model name]     |                                 | {\"messages\": [[SystemMessage, HumanMessage]]} | AIMessageChunk(content=\"hello world\")           |\n"," |      +----------------------+------------------+---------------------------------+-----------------------------------------------+-------------------------------------------------+\n"," |      | on_llm_start         | [model name]     |                                 | {'input': 'hello'}                            |                                                 |\n"," |      +----------------------+------------------+---------------------------------+-----------------------------------------------+-------------------------------------------------+\n"," |      | on_llm_stream        | [model name]     | 'Hello'                         |                                               |                                                 |\n"," |      +----------------------+------------------+---------------------------------+-----------------------------------------------+-------------------------------------------------+\n"," |      | on_llm_end           | [model name]     |                                 | 'Hello human!'                                |                                                 |\n"," |      +----------------------+------------------+---------------------------------+-----------------------------------------------+-------------------------------------------------+\n"," |      | on_chain_start       | format_docs      |                                 |                                               |                                                 |\n"," |      +----------------------+------------------+---------------------------------+-----------------------------------------------+-------------------------------------------------+\n"," |      | on_chain_stream      | format_docs      | \"hello world!, goodbye world!\"  |                                               |                                                 |\n"," |      +----------------------+------------------+---------------------------------+-----------------------------------------------+-------------------------------------------------+\n"," |      | on_chain_end         | format_docs      |                                 | [Document(...)]                               | \"hello world!, goodbye world!\"                  |\n"," |      +----------------------+------------------+---------------------------------+-----------------------------------------------+-------------------------------------------------+\n"," |      | on_tool_start        | some_tool        |                                 | {\"x\": 1, \"y\": \"2\"}                            |                                                 |\n"," |      +----------------------+------------------+---------------------------------+-----------------------------------------------+-------------------------------------------------+\n"," |      | on_tool_end          | some_tool        |                                 |                                               | {\"x\": 1, \"y\": \"2\"}                              |\n"," |      +----------------------+------------------+---------------------------------+-----------------------------------------------+-------------------------------------------------+\n"," |      | on_retriever_start   | [retriever name] |                                 | {\"query\": \"hello\"}                            |                                                 |\n"," |      +----------------------+------------------+---------------------------------+-----------------------------------------------+-------------------------------------------------+\n"," |      | on_retriever_end     | [retriever name] |                                 | {\"query\": \"hello\"}                            | [Document(...), ..]                             |\n"," |      +----------------------+------------------+---------------------------------+-----------------------------------------------+-------------------------------------------------+\n"," |      | on_prompt_start      | [template_name]  |                                 | {\"question\": \"hello\"}                         |                                                 |\n"," |      +----------------------+------------------+---------------------------------+-----------------------------------------------+-------------------------------------------------+\n"," |      | on_prompt_end        | [template_name]  |                                 | {\"question\": \"hello\"}                         | ChatPromptValue(messages: [SystemMessage, ...]) |\n"," |      +----------------------+------------------+---------------------------------+-----------------------------------------------+-------------------------------------------------+\n"," |      \n"," |      Here are declarations associated with the events shown above:\n"," |      \n"," |      `format_docs`:\n"," |      \n"," |      .. code-block:: python\n"," |      \n"," |          def format_docs(docs: List[Document]) -> str:\n"," |              '''Format the docs.'''\n"," |              return \", \".join([doc.page_content for doc in docs])\n"," |      \n"," |          format_docs = RunnableLambda(format_docs)\n"," |      \n"," |      `some_tool`:\n"," |      \n"," |      .. code-block:: python\n"," |      \n"," |          @tool\n"," |          def some_tool(x: int, y: str) -> dict:\n"," |              '''Some_tool.'''\n"," |              return {\"x\": x, \"y\": y}\n"," |      \n"," |      `prompt`:\n"," |      \n"," |      .. code-block:: python\n"," |      \n"," |          template = ChatPromptTemplate.from_messages(\n"," |              [(\"system\", \"You are Cat Agent 007\"), (\"human\", \"{question}\")]\n"," |          ).with_config({\"run_name\": \"my_template\", \"tags\": [\"my_template\"]})\n"," |      \n"," |      \n"," |      Example:\n"," |      \n"," |      .. code-block:: python\n"," |      \n"," |          from langchain_core.runnables import RunnableLambda\n"," |      \n"," |          async def reverse(s: str) -> str:\n"," |              return s[::-1]\n"," |      \n"," |          chain = RunnableLambda(func=reverse)\n"," |      \n"," |          events = [\n"," |              event async for event in chain.astream_events(\"hello\", version=\"v2\")\n"," |          ]\n"," |      \n"," |          # will produce the following events (run_id, and parent_ids\n"," |          # has been omitted for brevity):\n"," |          [\n"," |              {\n"," |                  \"data\": {\"input\": \"hello\"},\n"," |                  \"event\": \"on_chain_start\",\n"," |                  \"metadata\": {},\n"," |                  \"name\": \"reverse\",\n"," |                  \"tags\": [],\n"," |              },\n"," |              {\n"," |                  \"data\": {\"chunk\": \"olleh\"},\n"," |                  \"event\": \"on_chain_stream\",\n"," |                  \"metadata\": {},\n"," |                  \"name\": \"reverse\",\n"," |                  \"tags\": [],\n"," |              },\n"," |              {\n"," |                  \"data\": {\"output\": \"olleh\"},\n"," |                  \"event\": \"on_chain_end\",\n"," |                  \"metadata\": {},\n"," |                  \"name\": \"reverse\",\n"," |                  \"tags\": [],\n"," |              },\n"," |          ]\n"," |      \n"," |      Args:\n"," |          input: The input to the runnable.\n"," |          config: The config to use for the runnable.\n"," |          version: The version of the schema to use either `v2` or `v1`.\n"," |                   Users should use `v2`.\n"," |                   `v1` is for backwards compatibility and will be deprecated\n"," |                   in 0.4.0.\n"," |                   No default will be assigned until the API is stabilized.\n"," |          include_names: Only include events from runnables with matching names.\n"," |          include_types: Only include events from runnables with matching types.\n"," |          include_tags: Only include events from runnables with matching tags.\n"," |          exclude_names: Exclude events from runnables with matching names.\n"," |          exclude_types: Exclude events from runnables with matching types.\n"," |          exclude_tags: Exclude events from runnables with matching tags.\n"," |          kwargs: Additional keyword arguments to pass to the runnable.\n"," |              These will be passed to astream_log as this implementation\n"," |              of astream_events is built on top of astream_log.\n"," |      \n"," |      Returns:\n"," |          An async stream of StreamEvents.\n"," |      \n"," |      Notes\n"," |      -----\n"," |      .. beta::\n"," |         This API is in beta and may change in the future.\n"," |  \n"," |  async astream_log(self, input: 'Any', config: 'Optional[RunnableConfig]' = None, *, diff: 'bool' = True, with_streamed_output_list: 'bool' = True, include_names: 'Optional[Sequence[str]]' = None, include_types: 'Optional[Sequence[str]]' = None, include_tags: 'Optional[Sequence[str]]' = None, exclude_names: 'Optional[Sequence[str]]' = None, exclude_types: 'Optional[Sequence[str]]' = None, exclude_tags: 'Optional[Sequence[str]]' = None, **kwargs: 'Any') -> 'Union[AsyncIterator[RunLogPatch], AsyncIterator[RunLog]]'\n"," |      Stream all output from a runnable, as reported to the callback system.\n"," |      This includes all inner runs of LLMs, Retrievers, Tools, etc.\n"," |      \n"," |      Output is streamed as Log objects, which include a list of\n"," |      jsonpatch ops that describe how the state of the run has changed in each\n"," |      step, and the final state of the run.\n"," |      \n"," |      The jsonpatch ops can be applied in order to construct state.\n"," |      \n"," |      Args:\n"," |          input: The input to the runnable.\n"," |          config: The config to use for the runnable.\n"," |          diff: Whether to yield diffs between each step, or the current state.\n"," |          with_streamed_output_list: Whether to yield the streamed_output list.\n"," |          include_names: Only include logs with these names.\n"," |          include_types: Only include logs with these types.\n"," |          include_tags: Only include logs with these tags.\n"," |          exclude_names: Exclude logs with these names.\n"," |          exclude_types: Exclude logs with these types.\n"," |          exclude_tags: Exclude logs with these tags.\n"," |  \n"," |  async atransform(self, input: 'AsyncIterator[Input]', config: 'Optional[RunnableConfig]' = None, **kwargs: 'Optional[Any]') -> 'AsyncIterator[Output]'\n"," |      Default implementation of atransform, which buffers input and calls astream.\n"," |      Subclasses should override this method if they can start producing output while\n"," |      input is still being generated.\n"," |  \n"," |  batch(self, inputs: 'List[Input]', config: 'Optional[Union[RunnableConfig, List[RunnableConfig]]]' = None, *, return_exceptions: 'bool' = False, **kwargs: 'Optional[Any]') -> 'List[Output]'\n"," |      Default implementation runs invoke in parallel using a thread pool executor.\n"," |      \n"," |      The default implementation of batch works well for IO bound runnables.\n"," |      \n"," |      Subclasses should override this method if they can batch more efficiently;\n"," |      e.g., if the underlying runnable uses an API which supports a batch mode.\n"," |  \n"," |  batch_as_completed(self, inputs: 'Sequence[Input]', config: 'Optional[Union[RunnableConfig, Sequence[RunnableConfig]]]' = None, *, return_exceptions: 'bool' = False, **kwargs: 'Optional[Any]') -> 'Iterator[Tuple[int, Union[Output, Exception]]]'\n"," |      Run invoke in parallel on a list of inputs,\n"," |      yielding results as they complete.\n"," |  \n"," |  bind(self, **kwargs: 'Any') -> 'Runnable[Input, Output]'\n"," |      Bind arguments to a Runnable, returning a new Runnable.\n"," |      \n"," |      Useful when a runnable in a chain requires an argument that is not\n"," |      in the output of the previous runnable or included in the user input.\n"," |      \n"," |      Example:\n"," |      \n"," |      .. code-block:: python\n"," |      \n"," |          from langchain_community.chat_models import ChatOllama\n"," |          from langchain_core.output_parsers import StrOutputParser\n"," |      \n"," |          llm = ChatOllama(model='llama2')\n"," |      \n"," |          # Without bind.\n"," |          chain = (\n"," |              llm\n"," |              | StrOutputParser()\n"," |          )\n"," |      \n"," |          chain.invoke(\"Repeat quoted words exactly: 'One two three four five.'\")\n"," |          # Output is 'One two three four five.'\n"," |      \n"," |          # With bind.\n"," |          chain = (\n"," |              llm.bind(stop=[\"three\"])\n"," |              | StrOutputParser()\n"," |          )\n"," |      \n"," |          chain.invoke(\"Repeat quoted words exactly: 'One two three four five.'\")\n"," |          # Output is 'One two'\n"," |  \n"," |  config_schema(self, *, include: 'Optional[Sequence[str]]' = None) -> 'Type[BaseModel]'\n"," |      The type of config this runnable accepts specified as a pydantic model.\n"," |      \n"," |      To mark a field as configurable, see the `configurable_fields`\n"," |      and `configurable_alternatives` methods.\n"," |      \n"," |      Args:\n"," |          include: A list of fields to include in the config schema.\n"," |      \n"," |      Returns:\n"," |          A pydantic model that can be used to validate config.\n"," |  \n"," |  get_graph(self, config: 'Optional[RunnableConfig]' = None) -> 'Graph'\n"," |      Return a graph representation of this runnable.\n"," |  \n"," |  get_input_schema(self, config: 'Optional[RunnableConfig]' = None) -> 'Type[BaseModel]'\n"," |      Get a pydantic model that can be used to validate input to the runnable.\n"," |      \n"," |      Runnables that leverage the configurable_fields and configurable_alternatives\n"," |      methods will have a dynamic input schema that depends on which\n"," |      configuration the runnable is invoked with.\n"," |      \n"," |      This method allows to get an input schema for a specific configuration.\n"," |      \n"," |      Args:\n"," |          config: A config to use when generating the schema.\n"," |      \n"," |      Returns:\n"," |          A pydantic model that can be used to validate input.\n"," |  \n"," |  get_name(self, suffix: 'Optional[str]' = None, *, name: 'Optional[str]' = None) -> 'str'\n"," |      Get the name of the runnable.\n"," |  \n"," |  get_output_schema(self, config: 'Optional[RunnableConfig]' = None) -> 'Type[BaseModel]'\n"," |      Get a pydantic model that can be used to validate output to the runnable.\n"," |      \n"," |      Runnables that leverage the configurable_fields and configurable_alternatives\n"," |      methods will have a dynamic output schema that depends on which\n"," |      configuration the runnable is invoked with.\n"," |      \n"," |      This method allows to get an output schema for a specific configuration.\n"," |      \n"," |      Args:\n"," |          config: A config to use when generating the schema.\n"," |      \n"," |      Returns:\n"," |          A pydantic model that can be used to validate output.\n"," |  \n"," |  get_prompts(self, config: 'Optional[RunnableConfig]' = None) -> 'List[BasePromptTemplate]'\n"," |  \n"," |  map(self) -> 'Runnable[List[Input], List[Output]]'\n"," |      Return a new Runnable that maps a list of inputs to a list of outputs,\n"," |      by calling invoke() with each input.\n"," |      \n"," |      Example:\n"," |      \n"," |          .. code-block:: python\n"," |      \n"," |                  from langchain_core.runnables import RunnableLambda\n"," |      \n"," |                  def _lambda(x: int) -> int:\n"," |                      return x + 1\n"," |      \n"," |                  runnable = RunnableLambda(_lambda)\n"," |                  print(runnable.map().invoke([1, 2, 3])) # [2, 3, 4]\n"," |  \n"," |  pick(self, keys: 'Union[str, List[str]]') -> 'RunnableSerializable[Any, Any]'\n"," |      Pick keys from the dict output of this runnable.\n"," |      \n"," |      Pick single key:\n"," |          .. code-block:: python\n"," |      \n"," |              import json\n"," |      \n"," |              from langchain_core.runnables import RunnableLambda, RunnableMap\n"," |      \n"," |              as_str = RunnableLambda(str)\n"," |              as_json = RunnableLambda(json.loads)\n"," |              chain = RunnableMap(str=as_str, json=as_json)\n"," |      \n"," |              chain.invoke(\"[1, 2, 3]\")\n"," |              # -> {\"str\": \"[1, 2, 3]\", \"json\": [1, 2, 3]}\n"," |      \n"," |              json_only_chain = chain.pick(\"json\")\n"," |              json_only_chain.invoke(\"[1, 2, 3]\")\n"," |              # -> [1, 2, 3]\n"," |      \n"," |      Pick list of keys:\n"," |          .. code-block:: python\n"," |      \n"," |              from typing import Any\n"," |      \n"," |              import json\n"," |      \n"," |              from langchain_core.runnables import RunnableLambda, RunnableMap\n"," |      \n"," |              as_str = RunnableLambda(str)\n"," |              as_json = RunnableLambda(json.loads)\n"," |              def as_bytes(x: Any) -> bytes:\n"," |                  return bytes(x, \"utf-8\")\n"," |      \n"," |              chain = RunnableMap(\n"," |                  str=as_str,\n"," |                  json=as_json,\n"," |                  bytes=RunnableLambda(as_bytes)\n"," |              )\n"," |      \n"," |              chain.invoke(\"[1, 2, 3]\")\n"," |              # -> {\"str\": \"[1, 2, 3]\", \"json\": [1, 2, 3], \"bytes\": b\"[1, 2, 3]\"}\n"," |      \n"," |              json_and_bytes_chain = chain.pick([\"json\", \"bytes\"])\n"," |              json_and_bytes_chain.invoke(\"[1, 2, 3]\")\n"," |              # -> {\"json\": [1, 2, 3], \"bytes\": b\"[1, 2, 3]\"}\n"," |  \n"," |  pipe(self, *others: 'Union[Runnable[Any, Other], Callable[[Any], Other]]', name: 'Optional[str]' = None) -> 'RunnableSerializable[Input, Other]'\n"," |      Compose this Runnable with Runnable-like objects to make a RunnableSequence.\n"," |      \n"," |      Equivalent to `RunnableSequence(self, *others)` or `self | others[0] | ...`\n"," |      \n"," |      Example:\n"," |          .. code-block:: python\n"," |      \n"," |              from langchain_core.runnables import RunnableLambda\n"," |      \n"," |              def add_one(x: int) -> int:\n"," |                  return x + 1\n"," |      \n"," |              def mul_two(x: int) -> int:\n"," |                  return x * 2\n"," |      \n"," |              runnable_1 = RunnableLambda(add_one)\n"," |              runnable_2 = RunnableLambda(mul_two)\n"," |              sequence = runnable_1.pipe(runnable_2)\n"," |              # Or equivalently:\n"," |              # sequence = runnable_1 | runnable_2\n"," |              # sequence = RunnableSequence(first=runnable_1, last=runnable_2)\n"," |              sequence.invoke(1)\n"," |              await sequence.ainvoke(1)\n"," |              # -> 4\n"," |      \n"," |              sequence.batch([1, 2, 3])\n"," |              await sequence.abatch([1, 2, 3])\n"," |              # -> [4, 6, 8]\n"," |  \n"," |  transform(self, input: 'Iterator[Input]', config: 'Optional[RunnableConfig]' = None, **kwargs: 'Optional[Any]') -> 'Iterator[Output]'\n"," |      Default implementation of transform, which buffers input and then calls stream.\n"," |      Subclasses should override this method if they can start producing output while\n"," |      input is still being generated.\n"," |  \n"," |  with_alisteners(self, *, on_start: 'Optional[AsyncListener]' = None, on_end: 'Optional[AsyncListener]' = None, on_error: 'Optional[AsyncListener]' = None) -> 'Runnable[Input, Output]'\n"," |      Bind asynchronous lifecycle listeners to a Runnable, returning a new Runnable.\n"," |      \n"," |      on_start: Asynchronously called before the runnable starts running.\n"," |      on_end: Asynchronously called after the runnable finishes running.\n"," |      on_error: Asynchronously called if the runnable throws an error.\n"," |      \n"," |      The Run object contains information about the run, including its id,\n"," |      type, input, output, error, start_time, end_time, and any tags or metadata\n"," |      added to the run.\n"," |      \n"," |      Example:\n"," |      \n"," |      .. code-block:: python\n"," |      \n"," |          from langchain_core.runnables import RunnableLambda\n"," |          import time\n"," |      \n"," |          async def test_runnable(time_to_sleep : int):\n"," |              print(f\"Runnable[{time_to_sleep}s]: starts at {format_t(time.time())}\")\n"," |              await asyncio.sleep(time_to_sleep)\n"," |              print(f\"Runnable[{time_to_sleep}s]: ends at {format_t(time.time())}\")\n"," |      \n"," |          async def fn_start(run_obj : Runnable):\n"," |              print(f\"on start callback starts at {format_t(time.time())}\n"," |              await asyncio.sleep(3)\n"," |              print(f\"on start callback ends at {format_t(time.time())}\")\n"," |      \n"," |          async def fn_end(run_obj : Runnable):\n"," |              print(f\"on end callback starts at {format_t(time.time())}\n"," |              await asyncio.sleep(2)\n"," |              print(f\"on end callback ends at {format_t(time.time())}\")\n"," |      \n"," |          runnable = RunnableLambda(test_runnable).with_alisteners(\n"," |              on_start=fn_start,\n"," |              on_end=fn_end\n"," |          )\n"," |          async def concurrent_runs():\n"," |              await asyncio.gather(runnable.ainvoke(2), runnable.ainvoke(3))\n"," |      \n"," |          asyncio.run(concurrent_runs())\n"," |          Result:\n"," |          on start callback starts at 2024-05-16T14:20:29.637053+00:00\n"," |          on start callback starts at 2024-05-16T14:20:29.637150+00:00\n"," |          on start callback ends at 2024-05-16T14:20:32.638305+00:00\n"," |          on start callback ends at 2024-05-16T14:20:32.638383+00:00\n"," |          Runnable[3s]: starts at 2024-05-16T14:20:32.638849+00:00\n"," |          Runnable[5s]: starts at 2024-05-16T14:20:32.638999+00:00\n"," |          Runnable[3s]: ends at 2024-05-16T14:20:35.640016+00:00\n"," |          on end callback starts at 2024-05-16T14:20:35.640534+00:00\n"," |          Runnable[5s]: ends at 2024-05-16T14:20:37.640169+00:00\n"," |          on end callback starts at 2024-05-16T14:20:37.640574+00:00\n"," |          on end callback ends at 2024-05-16T14:20:37.640654+00:00\n"," |          on end callback ends at 2024-05-16T14:20:39.641751+00:00\n"," |  \n"," |  with_config(self, config: 'Optional[RunnableConfig]' = None, **kwargs: 'Any') -> 'Runnable[Input, Output]'\n"," |      Bind config to a Runnable, returning a new Runnable.\n"," |  \n"," |  with_fallbacks(self, fallbacks: 'Sequence[Runnable[Input, Output]]', *, exceptions_to_handle: 'Tuple[Type[BaseException], ...]' = (<class 'Exception'>,), exception_key: 'Optional[str]' = None) -> 'RunnableWithFallbacksT[Input, Output]'\n"," |      Add fallbacks to a runnable, returning a new Runnable.\n"," |      \n"," |      Example:\n"," |      \n"," |          .. code-block:: python\n"," |      \n"," |              from typing import Iterator\n"," |      \n"," |              from langchain_core.runnables import RunnableGenerator\n"," |      \n"," |      \n"," |              def _generate_immediate_error(input: Iterator) -> Iterator[str]:\n"," |                  raise ValueError()\n"," |                  yield \"\"\n"," |      \n"," |      \n"," |              def _generate(input: Iterator) -> Iterator[str]:\n"," |                  yield from \"foo bar\"\n"," |      \n"," |      \n"," |              runnable = RunnableGenerator(_generate_immediate_error).with_fallbacks(\n"," |                  [RunnableGenerator(_generate)]\n"," |                  )\n"," |              print(''.join(runnable.stream({}))) #foo bar\n"," |      \n"," |      Args:\n"," |          fallbacks: A sequence of runnables to try if the original runnable fails.\n"," |          exceptions_to_handle: A tuple of exception types to handle.\n"," |          exception_key: If string is specified then handled exceptions will be passed\n"," |              to fallbacks as part of the input under the specified key. If None,\n"," |              exceptions will not be passed to fallbacks. If used, the base runnable\n"," |              and its fallbacks must accept a dictionary as input.\n"," |      \n"," |      Returns:\n"," |          A new Runnable that will try the original runnable, and then each\n"," |          fallback in order, upon failures.\n"," |  \n"," |  with_listeners(self, *, on_start: 'Optional[Union[Callable[[Run], None], Callable[[Run, RunnableConfig], None]]]' = None, on_end: 'Optional[Union[Callable[[Run], None], Callable[[Run, RunnableConfig], None]]]' = None, on_error: 'Optional[Union[Callable[[Run], None], Callable[[Run, RunnableConfig], None]]]' = None) -> 'Runnable[Input, Output]'\n"," |      Bind lifecycle listeners to a Runnable, returning a new Runnable.\n"," |      \n"," |      on_start: Called before the runnable starts running, with the Run object.\n"," |      on_end: Called after the runnable finishes running, with the Run object.\n"," |      on_error: Called if the runnable throws an error, with the Run object.\n"," |      \n"," |      The Run object contains information about the run, including its id,\n"," |      type, input, output, error, start_time, end_time, and any tags or metadata\n"," |      added to the run.\n"," |      \n"," |      Example:\n"," |      \n"," |      .. code-block:: python\n"," |      \n"," |          from langchain_core.runnables import RunnableLambda\n"," |          from langchain_core.tracers.schemas import Run\n"," |      \n"," |          import time\n"," |      \n"," |          def test_runnable(time_to_sleep : int):\n"," |              time.sleep(time_to_sleep)\n"," |      \n"," |          def fn_start(run_obj: Run):\n"," |              print(\"start_time:\", run_obj.start_time)\n"," |      \n"," |          def fn_end(run_obj: Run):\n"," |              print(\"end_time:\", run_obj.end_time)\n"," |      \n"," |          chain = RunnableLambda(test_runnable).with_listeners(\n"," |              on_start=fn_start,\n"," |              on_end=fn_end\n"," |          )\n"," |          chain.invoke(2)\n"," |  \n"," |  with_retry(self, *, retry_if_exception_type: 'Tuple[Type[BaseException], ...]' = (<class 'Exception'>,), wait_exponential_jitter: 'bool' = True, stop_after_attempt: 'int' = 3) -> 'Runnable[Input, Output]'\n"," |      Create a new Runnable that retries the original runnable on exceptions.\n"," |      \n"," |      Example:\n"," |      \n"," |      .. code-block:: python\n"," |      \n"," |          from langchain_core.runnables import RunnableLambda\n"," |      \n"," |          count = 0\n"," |      \n"," |      \n"," |          def _lambda(x: int) -> None:\n"," |              global count\n"," |              count = count + 1\n"," |              if x == 1:\n"," |                  raise ValueError(\"x is 1\")\n"," |              else:\n"," |                   pass\n"," |      \n"," |      \n"," |          runnable = RunnableLambda(_lambda)\n"," |          try:\n"," |              runnable.with_retry(\n"," |                  stop_after_attempt=2,\n"," |                  retry_if_exception_type=(ValueError,),\n"," |              ).invoke(1)\n"," |          except ValueError:\n"," |              pass\n"," |      \n"," |          assert (count == 2)\n"," |      \n"," |      \n"," |      Args:\n"," |          retry_if_exception_type: A tuple of exception types to retry on\n"," |          wait_exponential_jitter: Whether to add jitter to the wait time\n"," |                                   between retries\n"," |          stop_after_attempt: The maximum number of attempts to make before giving up\n"," |      \n"," |      Returns:\n"," |          A new Runnable that retries the original runnable on exceptions.\n"," |  \n"," |  with_types(self, *, input_type: 'Optional[Type[Input]]' = None, output_type: 'Optional[Type[Output]]' = None) -> 'Runnable[Input, Output]'\n"," |      Bind input and output types to a Runnable, returning a new Runnable.\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Readonly properties inherited from langchain_core.runnables.base.Runnable:\n"," |  \n"," |  config_specs\n"," |      List configurable fields for this runnable.\n"," |  \n"," |  input_schema\n"," |      The type of input this runnable accepts specified as a pydantic model.\n"," |  \n"," |  output_schema\n"," |      The type of output this runnable produces specified as a pydantic model.\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Data and other attributes inherited from langchain_core.runnables.base.Runnable:\n"," |  \n"," |  name = None\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Class methods inherited from typing.Generic:\n"," |  \n"," |  __class_getitem__(params) from pydantic.v1.main.ModelMetaclass\n"," |  \n"," |  __init_subclass__(*args, **kwargs) from pydantic.v1.main.ModelMetaclass\n"," |      This method is called when a class is subclassed.\n"," |      \n"," |      The default implementation does nothing. It may be\n"," |      overridden to extend subclasses.\n","\n"]}]},{"cell_type":"markdown","source":["SystemMessage: convey instructions or setup information that the system needs to consider when generating responses.\n","AIMessage: represents the responses generated by the AI.\n","HumanMessage: captures the inputs or queries provided by the human user.\n"],"metadata":{"id":"LAd5hDc7q1Uu"}},{"cell_type":"code","source":["from langchain.schema import(SystemMessage, AIMessage, HumanMessage)\n","\n","messages = [SystemMessage(content='You can only explain in Korean'),\n","            HumanMessage(content='Explain large language models in one sentence')]\n","\n","output = llm.invoke(messages)\n","print(output.content)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9-WOje-ckdLt","executionInfo":{"status":"ok","timestamp":1720010868442,"user_tz":-540,"elapsed":1340,"user":{"displayName":"Michael Jang","userId":"17204225237554874105"}},"outputId":"e27b6a5f-143c-4ada-db4e-cc56c15eea10"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["대규모 언어 모델은 많은 양의 데이터를 사용하여 학습되어 자연어 이해와 생성 작업을 수행하는 기술입니다.\n"]}]},{"cell_type":"markdown","source":["Caching LLM responses to speed up response. Fetch data from LLM in case of cache miss."],"metadata":{"id":"o8By31YNql4U"}},{"cell_type":"markdown","source":["InMemory Cache"],"metadata":{"id":"mHPH9GidrkZ6"}},{"cell_type":"code","source":["from langchain.globals import set_llm_cache\n","from langchain_openai import OpenAI\n","\n","llm = OpenAI()"],"metadata":{"id":"gpwH0kO2r2gM","executionInfo":{"status":"ok","timestamp":1720011711272,"user_tz":-540,"elapsed":390,"user":{"displayName":"Michael Jang","userId":"17204225237554874105"}}},"execution_count":33,"outputs":[]},{"cell_type":"code","source":["%%time\n","from langchain.cache import InMemoryCache\n","\n","set_llm_cache(InMemoryCache())\n","\n","llm.invoke(\"Tell me a joke about birds.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":70},"id":"5KfX6f9Kov8p","executionInfo":{"status":"ok","timestamp":1720011717026,"user_tz":-540,"elapsed":1809,"user":{"displayName":"Michael Jang","userId":"17204225237554874105"}},"outputId":"a7c92a94-73a9-4f30-babc-9f5df4980314"},"execution_count":34,"outputs":[{"output_type":"stream","name":"stdout","text":["CPU times: user 217 ms, sys: 1.13 ms, total: 218 ms\n","Wall time: 1.44 s\n"]},{"output_type":"execute_result","data":{"text/plain":["'\\n\\nWhy did the bird go to the doctor?\\n\\nBecause it was feeling a little tweet-mentally ill!'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":34}]},{"cell_type":"code","source":["%%time\n","llm.invoke(\"Tell me a joke about birds.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":70},"id":"9UTBarz7rvsN","executionInfo":{"status":"ok","timestamp":1720011747478,"user_tz":-540,"elapsed":406,"user":{"displayName":"Michael Jang","userId":"17204225237554874105"}},"outputId":"46d15ac7-0ab7-44f0-c8e8-349258610efe"},"execution_count":35,"outputs":[{"output_type":"stream","name":"stdout","text":["CPU times: user 1.15 ms, sys: 13 µs, total: 1.16 ms\n","Wall time: 1.18 ms\n"]},{"output_type":"execute_result","data":{"text/plain":["'\\n\\nWhy did the bird go to the doctor?\\n\\nBecause it was feeling a little tweet-mentally ill!'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":35}]},{"cell_type":"markdown","source":["LLM Streaming"],"metadata":{"id":"3Wzx7Z7usY9j"}},{"cell_type":"code","source":["from langchain_openai import ChatOpenAI\n","\n","llm = OpenAI()\n","llm.invoke(\"Explain overfitting in the context of neural networks.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":140},"id":"OLsZB0EXsGww","executionInfo":{"status":"ok","timestamp":1720011896739,"user_tz":-540,"elapsed":5143,"user":{"displayName":"Michael Jang","userId":"17204225237554874105"}},"outputId":"b0284ec1-59af-4f31-92f0-e02e60c609ee"},"execution_count":36,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'\\n\\nOverfitting in the context of neural networks refers to a situation where the model performs well on the training data but fails to generalize to new, unseen data. Essentially, the model has memorized the patterns in the training data instead of learning the underlying patterns and relationships that would enable it to make accurate predictions on new data.\\n\\nThis can happen when the neural network is too complex and has too many parameters, leading to it \"overfitting\" to the training data. This means that the model is able to fit the training data very closely, but it may not be able to generalize to new data because it has learned too many specific details and noise from the training data.\\n\\nOverfitting can also occur if the training data is not representative of the overall population or if there is not enough data to capture the true underlying patterns. In this case, the model may learn patterns that are specific to the training data but do not apply to new data.\\n\\nOverfitting can be identified by comparing the performance of the model on the training data versus the validation or test data. If the model performs significantly better on the training data than on the validation or test data, it is likely overfitting.\\n\\nTo address overfitting, techniques such as regularization, dropout, and early stopping'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":36}]},{"cell_type":"code","source":["for chunk in llm.stream(\"Explain overfitting in the context of neural networks.\"):\n","    print(chunk, end='', flush=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dkRVFz_KsqF9","executionInfo":{"status":"ok","timestamp":1720012009585,"user_tz":-540,"elapsed":4318,"user":{"displayName":"Michael Jang","userId":"17204225237554874105"}},"outputId":"0ea76989-209b-413b-91bb-33f96c7c52e7"},"execution_count":40,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","\n","Overfitting in the context of neural networks refers to a situation where a model performs very well on the training data but fails to generalize to new, unseen data. This occurs when the model has learned the specific patterns and noise in the training data too well, to the point that it is unable to capture the underlying patterns and relationships in the data. As a result, the model becomes too complex and specialized, leading to poor performance on new data.\n","\n","One of the main causes of overfitting in neural networks is having too many parameters or layers in the model. This allows the model to fit the training data too closely, leading to high accuracy but poor generalization. Another factor is the lack of diverse and representative training data, which can lead to the model learning only a limited set of patterns and failing to generalize to new data.\n","\n","Overfitting can also occur due to the use of inappropriate model architectures, such as using a model that is too complex for the given dataset or using too few training examples. Additionally, overfitting can occur due to the use of inappropriate training methods, such as training for too long or using a high learning rate, which can lead to the model memorizing the training data rather than learning the underlying patterns.\n","\n","To address overfitting in"]}]},{"cell_type":"markdown","source":["Prompt Template"],"metadata":{"id":"EEaCn6zJwOER"}},{"cell_type":"code","source":["from langchain.prompts import PromptTemplate\n","from langchain_openai import ChatOpenAI\n","\n","template = '''You are a helpful assistant that translates anything to {from_language}. Explain {topic} in a few sentences.'''\n","prompt_template = PromptTemplate(template=template)\n","\n","prompt = prompt_template.format(from_language='Korean', topic='vector embedding')\n","prompt"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"z3gnHbkNs5bf","executionInfo":{"status":"ok","timestamp":1720013586070,"user_tz":-540,"elapsed":389,"user":{"displayName":"Michael Jang","userId":"17204225237554874105"}},"outputId":"5dd639de-d40f-4fa3-a215-221733f4dd3f"},"execution_count":52,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'You are a helpful assistant that translates anything to Korean. Explain vector in a few sentences.'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":52}]},{"cell_type":"code","source":["llm = ChatOpenAI(modeltemperature=0)\n","output = llm.invoke(prompt)\n","print(output.content)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":391},"id":"sYIE6cKkxG7o","executionInfo":{"status":"error","timestamp":1720013614948,"user_tz":-540,"elapsed":478,"user":{"displayName":"Michael Jang","userId":"17204225237554874105"}},"outputId":"d0cacf94-0ea3-40db-a11c-9f04211f6646"},"execution_count":55,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/langchain_core/utils/utils.py:161: UserWarning: WARNING! modeltemperature is not default parameter.\n","                modeltemperature was transferred to model_kwargs.\n","                Please confirm that modeltemperature is what you intended.\n","  warnings.warn(\n"]},{"output_type":"error","ename":"TypeError","evalue":"string indices must be integers","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-55-91891290fa34>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mllm\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mChatOpenAI\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodeltemperature\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0moutput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mllm\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minvoke\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprompt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcontent\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/langchain_core/language_models/chat_models.py\u001b[0m in \u001b[0;36minvoke\u001b[0;34m(self, input, config, stop, **kwargs)\u001b[0m\n\u001b[1;32m    246\u001b[0m         return cast(\n\u001b[1;32m    247\u001b[0m             \u001b[0mChatGeneration\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 248\u001b[0;31m             self.generate_prompt(\n\u001b[0m\u001b[1;32m    249\u001b[0m                 \u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_convert_input\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    250\u001b[0m                 \u001b[0mstop\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstop\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/langchain_core/language_models/chat_models.py\u001b[0m in \u001b[0;36mgenerate_prompt\u001b[0;34m(self, prompts, stop, callbacks, **kwargs)\u001b[0m\n\u001b[1;32m    679\u001b[0m     ) -> LLMResult:\n\u001b[1;32m    680\u001b[0m         \u001b[0mprompt_messages\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_messages\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mp\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mprompts\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 681\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgenerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprompt_messages\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstop\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstop\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallbacks\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcallbacks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    682\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    683\u001b[0m     async def agenerate_prompt(\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/langchain_core/language_models/chat_models.py\u001b[0m in \u001b[0;36mgenerate\u001b[0;34m(self, messages, stop, callbacks, tags, metadata, run_name, run_id, **kwargs)\u001b[0m\n\u001b[1;32m    536\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mrun_managers\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    537\u001b[0m                     \u001b[0mrun_managers\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_llm_error\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mLLMResult\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgenerations\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 538\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    539\u001b[0m         flattened_outputs = [\n\u001b[1;32m    540\u001b[0m             \u001b[0mLLMResult\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgenerations\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mres\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgenerations\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mllm_output\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mres\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mllm_output\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[list-item]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/langchain_core/language_models/chat_models.py\u001b[0m in \u001b[0;36mgenerate\u001b[0;34m(self, messages, stop, callbacks, tags, metadata, run_name, run_id, **kwargs)\u001b[0m\n\u001b[1;32m    526\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    527\u001b[0m                 results.append(\n\u001b[0;32m--> 528\u001b[0;31m                     self._generate_with_cache(\n\u001b[0m\u001b[1;32m    529\u001b[0m                         \u001b[0mm\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    530\u001b[0m                         \u001b[0mstop\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstop\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/langchain_core/language_models/chat_models.py\u001b[0m in \u001b[0;36m_generate_with_cache\u001b[0;34m(self, messages, stop, run_manager, **kwargs)\u001b[0m\n\u001b[1;32m    710\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcheck_cache\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    711\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mllm_cache\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 712\u001b[0;31m                 \u001b[0mllm_string\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_llm_string\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstop\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstop\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    713\u001b[0m                 \u001b[0mprompt\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdumps\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmessages\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    714\u001b[0m                 \u001b[0mcache_val\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mllm_cache\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlookup\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprompt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mllm_string\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/langchain_core/language_models/chat_models.py\u001b[0m in \u001b[0;36m_get_llm_string\u001b[0;34m(self, stop, **kwargs)\u001b[0m\n\u001b[1;32m    453\u001b[0m             \u001b[0;31m# json and dict.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    454\u001b[0m             \u001b[0mserialized_repr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdumpd\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 455\u001b[0;31m             \u001b[0m_cleanup_llm_representation\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mserialized_repr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    456\u001b[0m             \u001b[0mllm_string\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mjson\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdumps\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mserialized_repr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msort_keys\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    457\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mllm_string\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m\"---\"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mparam_string\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/langchain_core/language_models/chat_models.py\u001b[0m in \u001b[0;36m_cleanup_llm_representation\u001b[0;34m(serialized, depth)\u001b[0m\n\u001b[1;32m   1237\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1238\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mvalue\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1239\u001b[0;31m             \u001b[0m_cleanup_llm_representation\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdepth\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/langchain_core/language_models/chat_models.py\u001b[0m in \u001b[0;36m_cleanup_llm_representation\u001b[0;34m(serialized, depth)\u001b[0m\n\u001b[1;32m   1227\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mdepth\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m100\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# Don't cooperate for pathological cases\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1228\u001b[0m         \u001b[0;32mreturn\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1229\u001b[0;31m     \u001b[0;32mif\u001b[0m \u001b[0mserialized\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"type\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"not_implemented\"\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m\"repr\"\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mserialized\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1230\u001b[0m         \u001b[0;32mdel\u001b[0m \u001b[0mserialized\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"repr\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1231\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: string indices must be integers"]}]},{"cell_type":"code","source":[],"metadata":{"id":"MMvsh6V5z1nU"},"execution_count":null,"outputs":[]}]}